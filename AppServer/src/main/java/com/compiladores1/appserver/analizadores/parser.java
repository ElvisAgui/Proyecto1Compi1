
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladores1.appserver.analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.compiladores1.appserver.simbolTable.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\312\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\002\003\000\002\004\006\000\002\004\006" +
    "\000\002\004\002\000\002\004\004\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\005\007\000\002\005\007\000\002\005\006\000\002\070" +
    "\004\000\002\006\007\000\002\006\004\000\002\071\007" +
    "\000\002\071\006\000\002\071\006\000\002\071\007\000" +
    "\002\007\004\000\002\007\003\000\002\007\004\000\002" +
    "\007\005\000\002\007\005\000\002\007\004\000\002\010" +
    "\004\000\002\011\004\000\002\011\004\000\002\012\005" +
    "\000\002\012\006\000\002\012\004\000\002\012\003\000" +
    "\002\012\004\000\002\013\003\000\002\013\002\000\002" +
    "\014\003\000\002\014\007\000\002\014\006\000\002\014" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\017\004\000\002" +
    "\017\002\000\002\017\004\000\002\021\004\000\002\021" +
    "\002\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\004\000\002" +
    "\020\003\000\002\020\003\000\002\020\004\000\002\020" +
    "\004\000\002\020\003\000\002\020\005\000\002\060\003" +
    "\000\002\060\006\000\002\060\010\000\002\060\011\000" +
    "\002\060\005\000\002\060\004\000\002\060\005\000\002" +
    "\060\006\000\002\060\006\000\002\060\007\000\002\057" +
    "\007\000\002\057\010\000\002\057\005\000\002\057\004" +
    "\000\002\057\004\000\002\056\003\000\002\056\004\000" +
    "\002\055\005\000\002\055\005\000\002\055\006\000\002" +
    "\055\006\000\002\023\011\000\002\024\007\000\002\025" +
    "\011\000\002\027\011\000\002\030\013\000\002\031\011" +
    "\000\002\032\005\000\002\032\004\000\002\032\002\000" +
    "\002\032\004\000\002\033\006\000\002\033\005\000\002" +
    "\042\004\000\002\042\002\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\004\000\002\034\003\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\034\005\000\002" +
    "\035\003\000\002\035\004\000\002\035\005\000\002\035" +
    "\006\000\002\035\006\000\002\035\007\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\026\007\000\002" +
    "\026\010\000\002\026\005\000\002\026\004\000\002\026" +
    "\007\000\002\026\006\000\002\026\004\000\002\036\004" +
    "\000\002\036\005\000\002\037\003\000\002\037\002\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\006\000\002\041\007\000\002\043\003\000\002\063" +
    "\004\000\002\065\005\000\002\065\005\000\002\065\002" +
    "\000\002\064\004\000\002\066\005\000\002\066\005\000" +
    "\002\066\002\000\002\067\005\000\002\067\003\000\002" +
    "\044\005\000\002\044\007\000\002\044\007\000\002\045" +
    "\005\000\002\045\007\000\002\045\007\000\002\046\012" +
    "\000\002\046\012\000\002\046\012\000\002\062\003\000" +
    "\002\062\003\000\002\062\002\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\050\012\000\002\050" +
    "\011\000\002\051\003\000\002\051\005\000\002\051\004" +
    "\000\002\072\004\000\002\072\004\000\002\052\007\000" +
    "\002\052\010\000\002\052\005\000\002\052\007\000\002" +
    "\052\006\000\002\053\005\000\002\053\003\000\002\053" +
    "\004\000\002\054\007\000\002\054\006\000\002\061\004" +
    "\000\002\061\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\022\002\uffff\003\005\036\004\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000\004\037\u0190" +
    "\001\002\000\022\002\ufffe\003\u018e\036\004\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000\014\040\020" +
    "\041\016\042\013\043\017\044\015\001\002\000\004\002" +
    "\010\001\002\000\004\002\001\001\002\000\004\044\015" +
    "\001\002\000\004\002\000\001\002\000\022\037\uffdc\043" +
    "\022\044\uffdc\045\uffdc\046\uffdc\052\uffdc\054\uffdc\056\uffdc" +
    "\001\002\000\004\006\u0186\001\002\000\004\037\u0185\001" +
    "\002\000\022\037\uffdc\043\022\044\uffdc\045\uffdc\046\uffdc" +
    "\052\uffdc\054\uffdc\056\uffdc\001\002\000\004\044\015\001" +
    "\002\000\022\037\uffdc\043\022\044\uffdc\045\uffdc\046\uffdc" +
    "\052\uffdc\054\uffdc\056\uffdc\001\002\000\020\037\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\052\uffd0\054\uffd0\056\uffd0\001\002" +
    "\000\020\037\uffdd\044\uffdd\045\uffdd\046\uffdd\052\uffdd\054" +
    "\uffdd\056\uffdd\001\002\000\004\006\024\001\002\000\032" +
    "\003\037\007\uffcb\037\025\040\020\041\016\042\013\043" +
    "\036\045\027\046\033\052\035\054\030\056\044\001\002" +
    "\000\006\003\053\037\201\001\002\000\006\003\053\037" +
    "\201\001\002\000\006\003\uffd7\037\uffd7\001\002\000\006" +
    "\003\uffd3\037\uffd3\001\002\000\032\003\uffc9\007\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9" +
    "\052\uffc9\054\uffc9\056\uffc9\001\002\000\032\003\uffea\007" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\045\uffea" +
    "\046\uffea\052\uffea\054\uffea\056\uffea\001\002\000\006\003" +
    "\uffd6\037\uffd6\001\002\000\004\007\u0182\001\002\000\006" +
    "\003\uffd4\037\uffd4\001\002\000\016\037\u017f\045\027\046" +
    "\033\052\035\054\030\056\044\001\002\000\004\007\u017e" +
    "\001\002\000\016\037\046\045\027\046\033\052\035\054" +
    "\030\056\044\001\002\000\032\003\uffca\007\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\045\uffca\046\uffca\052" +
    "\uffca\054\uffca\056\uffca\001\002\000\032\003\uffc8\007\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8\046" +
    "\uffc8\052\uffc8\054\uffc8\056\uffc8\001\002\000\032\003\037" +
    "\007\uffcb\037\025\040\020\041\016\042\013\043\036\045" +
    "\027\046\033\052\035\054\030\056\044\001\002\000\006" +
    "\003\uffd5\037\uffd5\001\002\000\004\007\uffcc\001\002\000" +
    "\010\003\053\010\u0170\037\u016f\001\002\000\004\006\267" +
    "\001\002\000\006\003\053\037\054\001\002\000\032\003" +
    "\uffeb\007\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\045\uffeb\046\uffeb\052\uffeb\054\uffeb\056\uffeb\001\002\000" +
    "\062\003\uffe5\007\uffe5\015\uffe5\017\uffe5\020\uffe5\023\uffe5" +
    "\033\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\045" +
    "\uffe5\046\uffe5\052\uffe5\054\uffe5\056\uffe5\057\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\001\002\000" +
    "\004\014\266\001\002\000\014\003\057\010\061\013\055" +
    "\014\062\023\060\001\002\000\006\003\053\037\201\001" +
    "\002\000\062\003\uffe4\007\uffe4\015\uffe4\017\uffe4\020\uffe4" +
    "\023\uffe4\033\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\045\uffe4\046\uffe4\052\uffe4\054\uffe4\056\uffe4\057\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\001" +
    "\002\000\004\014\264\001\002\000\034\003\117\004\124" +
    "\005\103\010\125\034\120\037\100\047\105\050\102\051" +
    "\115\053\123\055\111\067\112\070\116\001\002\000\022" +
    "\003\066\011\064\037\063\045\027\046\033\052\035\054" +
    "\030\056\044\001\002\000\062\003\uffdf\007\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\023\uffdf\033\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\045\uffdf\046\uffdf\052\uffdf\054\uffdf" +
    "\056\uffdf\057\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\001\002\000\004\037\076\001\002\000\004" +
    "\006\uffee\001\002\000\006\011\uff48\013\074\001\002\000" +
    "\004\011\073\001\002\000\004\037\072\001\002\000\004" +
    "\011\071\001\002\000\004\006\uffef\001\002\000\006\011" +
    "\uff45\013\uff45\001\002\000\004\011\uff46\001\002\000\020" +
    "\003\066\037\063\045\027\046\033\052\035\054\030\056" +
    "\044\001\002\000\004\011\uff47\001\002\000\006\011\uff44" +
    "\013\uff44\001\002\000\016\024\250\027\251\030\247\031" +
    "\254\032\252\035\253\001\002\000\050\003\227\010\230" +
    "\011\uff8d\012\226\013\uff8d\014\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\035\uff8d\001\002\000\036\011" +
    "\uff60\013\uff60\014\uff60\016\uff60\017\217\020\216\024\uff60" +
    "\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\035" +
    "\uff60\001\002\000\042\011\uff84\012\211\013\uff84\014\uff84" +
    "\017\uff84\020\uff84\021\uff84\022\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\035\uff84\001\002" +
    "\000\042\011\uff86\013\uff86\014\uff86\016\uff86\017\uff86\020" +
    "\uff86\021\uff86\022\uff86\024\uff86\025\uff86\026\uff86\027\uff86" +
    "\030\uff86\031\uff86\032\uff86\035\uff86\001\002\000\042\011" +
    "\uff5c\013\uff5c\014\uff5c\016\uff5c\017\uff5c\020\uff5c\021\204" +
    "\022\202\024\uff5c\025\uff5c\026\uff5c\027\uff5c\030\uff5c\031" +
    "\uff5c\032\uff5c\035\uff5c\001\002\000\014\011\uff69\013\uff69" +
    "\014\uff69\025\uff69\026\uff69\001\002\000\006\013\176\014" +
    "\177\001\002\000\010\011\uff75\013\uff75\014\uff75\001\002" +
    "\000\042\011\uff5a\013\uff5a\014\uff5a\016\uff5a\017\uff5a\020" +
    "\uff5a\021\uff5a\022\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a" +
    "\030\uff5a\031\uff5a\032\uff5a\035\uff5a\001\002\000\042\011" +
    "\uff85\013\uff85\014\uff85\016\uff85\017\uff85\020\uff85\021\uff85" +
    "\022\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\032\uff85\035\uff85\001\002\000\004\037\153\001\002" +
    "\000\030\011\uff67\013\uff67\014\uff67\024\uff64\025\uff67\026" +
    "\uff67\027\uff64\030\uff64\031\uff64\032\uff64\035\uff64\001\002" +
    "\000\010\011\uff74\013\uff74\014\uff74\001\002\000\042\011" +
    "\uff83\013\uff83\014\uff83\016\uff83\017\uff83\020\uff83\021\uff83" +
    "\022\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031" +
    "\uff83\032\uff83\035\uff83\001\002\000\014\011\uff68\013\uff68" +
    "\014\uff68\025\uff68\026\uff68\001\002\000\006\011\143\014" +
    "\152\001\002\000\042\011\uff82\013\uff82\014\uff82\016\uff82" +
    "\017\uff82\020\uff82\021\uff82\022\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\035\uff82\001\002" +
    "\000\006\013\uffdb\014\uffdb\001\002\000\014\011\uff76\013" +
    "\uff76\014\uff76\025\135\026\134\001\002\000\026\004\124" +
    "\005\103\010\125\034\120\037\100\047\105\050\102\051" +
    "\115\055\111\070\116\001\002\000\042\011\uff87\013\uff87" +
    "\014\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\024" +
    "\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\035\uff87\001\002\000\022\004\124\005\103\010\125\034" +
    "\120\037\100\050\126\051\115\055\111\001\002\000\042" +
    "\011\uff84\013\uff84\014\uff84\016\uff84\017\uff84\020\uff84\021" +
    "\uff84\022\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\035\uff84\001\002\000\004\011\130\001" +
    "\002\000\042\011\uff5b\013\uff5b\014\uff5b\016\uff5b\017\uff5b" +
    "\020\uff5b\021\uff5b\022\uff5b\024\uff5b\025\uff5b\026\uff5b\027" +
    "\uff5b\030\uff5b\031\uff5b\032\uff5b\035\uff5b\001\002\000\010" +
    "\011\uff73\013\uff73\014\uff73\001\002\000\010\011\uff72\013" +
    "\uff72\014\uff72\001\002\000\014\011\uff71\013\uff71\014\uff71" +
    "\025\135\026\134\001\002\000\026\004\124\005\103\010" +
    "\125\034\120\037\100\047\105\050\102\051\115\055\111" +
    "\070\116\001\002\000\026\004\124\005\103\010\125\034" +
    "\120\037\100\047\105\050\102\051\115\055\111\070\116" +
    "\001\002\000\014\011\uff56\013\uff56\014\uff56\025\140\026" +
    "\137\001\002\000\032\003\141\004\124\005\103\010\125" +
    "\034\120\037\100\047\105\050\102\051\115\053\123\055" +
    "\111\070\116\001\002\000\032\003\141\004\124\005\103" +
    "\010\125\034\120\037\100\047\105\050\102\051\115\053" +
    "\123\055\111\070\116\001\002\000\004\011\143\001\002" +
    "\000\010\011\uff55\013\uff55\014\uff55\001\002\000\010\011" +
    "\uff70\013\uff70\014\uff70\001\002\000\010\011\uff54\013\uff54" +
    "\014\uff54\001\002\000\014\011\uff59\013\uff59\014\uff59\025" +
    "\147\026\146\001\002\000\032\003\141\004\124\005\103" +
    "\010\125\034\120\037\100\047\105\050\102\051\115\053" +
    "\123\055\111\070\116\001\002\000\032\003\141\004\124" +
    "\005\103\010\125\034\120\037\100\047\105\050\102\051" +
    "\115\053\123\055\111\070\116\001\002\000\010\011\uff57" +
    "\013\uff57\014\uff57\001\002\000\010\011\uff58\013\uff58\014" +
    "\uff58\001\002\000\006\013\uffd8\014\uffd8\001\002\000\004" +
    "\010\154\001\002\000\036\003\141\004\124\005\103\010" +
    "\125\011\160\034\120\037\100\047\105\050\102\051\115" +
    "\053\123\055\111\067\156\070\116\001\002\000\004\011" +
    "\175\001\002\000\004\037\164\001\002\000\006\011\uff3d" +
    "\013\161\001\002\000\006\013\uffd9\014\uffd9\001\002\000" +
    "\034\003\141\004\124\005\103\010\125\034\120\037\100" +
    "\047\105\050\102\051\115\053\123\055\111\067\156\070" +
    "\116\001\002\000\004\011\uff3e\001\002\000\004\011\uff3c" +
    "\001\002\000\004\010\165\001\002\000\036\003\141\004" +
    "\124\005\103\010\125\011\167\034\120\037\100\047\105" +
    "\050\102\051\115\053\123\055\111\067\156\070\116\001" +
    "\002\000\004\011\173\001\002\000\006\011\uff38\013\170" +
    "\001\002\000\034\003\141\004\124\005\103\010\125\034" +
    "\120\037\100\047\105\050\102\051\115\053\123\055\111" +
    "\067\156\070\116\001\002\000\004\011\uff3a\001\002\000" +
    "\004\011\uff39\001\002\000\006\011\uff38\013\170\001\002" +
    "\000\004\011\uff3b\001\002\000\006\013\uffda\014\uffda\001" +
    "\002\000\006\003\053\037\201\001\002\000\062\003\uffe2" +
    "\007\uffe2\015\uffe2\017\uffe2\020\uffe2\023\uffe2\033\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2" +
    "\052\uffe2\054\uffe2\056\uffe2\057\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002\000\062\003\uffe1" +
    "\007\uffe1\015\uffe1\017\uffe1\020\uffe1\023\uffe1\033\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\045\uffe1\046\uffe1" +
    "\052\uffe1\054\uffe1\056\uffe1\057\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\066\uffe1\001\002\000\012\003\057" +
    "\013\055\014\062\023\060\001\002\000\022\004\124\005" +
    "\103\010\125\034\120\037\100\050\126\051\115\055\111" +
    "\001\002\000\036\011\uff5f\013\uff5f\014\uff5f\016\uff5f\017" +
    "\uff5f\020\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f\030\uff5f" +
    "\031\uff5f\032\uff5f\035\uff5f\001\002\000\022\004\124\005" +
    "\103\010\125\034\120\037\100\050\126\051\115\055\111" +
    "\001\002\000\042\011\uff5c\013\uff5c\014\uff5c\016\uff5c\017" +
    "\uff5c\020\uff5c\021\204\022\202\024\uff5c\025\uff5c\026\uff5c" +
    "\027\uff5c\030\uff5c\031\uff5c\032\uff5c\035\uff5c\001\002\000" +
    "\036\011\uff5e\013\uff5e\014\uff5e\016\uff5e\017\uff5e\020\uff5e" +
    "\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e\031\uff5e\032" +
    "\uff5e\035\uff5e\001\002\000\042\011\uff5c\013\uff5c\014\uff5c" +
    "\016\uff5c\017\uff5c\020\uff5c\021\204\022\202\024\uff5c\025" +
    "\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\035\uff5c" +
    "\001\002\000\036\011\uff5d\013\uff5d\014\uff5d\016\uff5d\017" +
    "\uff5d\020\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d" +
    "\031\uff5d\032\uff5d\035\uff5d\001\002\000\004\010\212\001" +
    "\002\000\036\003\141\004\124\005\103\010\125\011\214" +
    "\034\120\037\100\047\105\050\102\051\115\053\123\055" +
    "\111\067\156\070\116\001\002\000\004\011\215\001\002" +
    "\000\014\011\uff66\013\uff66\014\uff66\025\uff66\026\uff66\001" +
    "\002\000\014\011\uff65\013\uff65\014\uff65\025\uff65\026\uff65" +
    "\001\002\000\022\004\124\005\103\010\125\034\120\037" +
    "\100\050\126\051\115\055\111\001\002\000\022\004\124" +
    "\005\103\010\125\034\120\037\100\050\126\051\115\055" +
    "\111\001\002\000\032\011\uff63\013\uff63\014\uff63\016\uff63" +
    "\024\uff63\025\uff63\026\uff63\027\uff63\030\uff63\031\uff63\032" +
    "\uff63\035\uff63\001\002\000\036\011\uff60\013\uff60\014\uff60" +
    "\016\uff60\017\217\020\216\024\uff60\025\uff60\026\uff60\027" +
    "\uff60\030\uff60\031\uff60\032\uff60\035\uff60\001\002\000\032" +
    "\011\uff61\013\uff61\014\uff61\016\uff61\024\uff61\025\uff61\026" +
    "\uff61\027\uff61\030\uff61\031\uff61\032\uff61\035\uff61\001\002" +
    "\000\036\011\uff60\013\uff60\014\uff60\016\uff60\017\217\020" +
    "\216\024\uff60\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60" +
    "\032\uff60\035\uff60\001\002\000\032\011\uff62\013\uff62\014" +
    "\uff62\016\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62" +
    "\031\uff62\032\uff62\035\uff62\001\002\000\042\011\uff8c\013" +
    "\uff8c\014\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\035\uff8c\001\002\000\004\037\237\001\002\000\004" +
    "\011\236\001\002\000\036\003\141\004\124\005\103\010" +
    "\125\011\232\034\120\037\100\047\105\050\102\051\115" +
    "\053\123\055\111\067\156\070\116\001\002\000\004\011" +
    "\234\001\002\000\046\003\227\011\uff8b\012\226\013\uff8b" +
    "\014\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\035\uff8b\001\002\000\042\011\uff89\013\uff89\014\uff89\016" +
    "\uff89\017\uff89\020\uff89\021\uff89\022\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\035\uff89\001" +
    "\002\000\046\003\227\011\uff8a\012\226\013\uff8a\014\uff8a" +
    "\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\024\uff8a\025" +
    "\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\035\uff8a" +
    "\001\002\000\042\011\uff88\013\uff88\014\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\024\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\035\uff88\001\002\000" +
    "\042\011\uff7b\013\uff7b\014\uff7b\016\uff7b\017\uff7b\020\uff7b" +
    "\021\uff7b\022\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\035\uff7b\001\002\000\050\003\227" +
    "\010\241\011\uff7e\012\226\013\uff7e\014\uff7e\016\uff7e\017" +
    "\uff7e\020\uff7e\021\uff7e\022\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\027\uff7e\030\uff7e\031\uff7e\032\uff7e\035\uff7e\001\002\000" +
    "\042\011\uff7f\013\uff7f\014\uff7f\016\uff7f\017\uff7f\020\uff7f" +
    "\021\uff7f\022\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030" +
    "\uff7f\031\uff7f\032\uff7f\035\uff7f\001\002\000\036\003\141" +
    "\004\124\005\103\010\125\011\243\034\120\037\100\047" +
    "\105\050\102\051\115\053\123\055\111\067\156\070\116" +
    "\001\002\000\004\011\245\001\002\000\046\003\227\011" +
    "\uff7c\012\226\013\uff7c\014\uff7c\016\uff7c\017\uff7c\020\uff7c" +
    "\021\uff7c\022\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030" +
    "\uff7c\031\uff7c\032\uff7c\035\uff7c\001\002\000\042\011\uff81" +
    "\013\uff81\014\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022" +
    "\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81" +
    "\032\uff81\035\uff81\001\002\000\046\003\227\011\uff7d\012" +
    "\226\013\uff7d\014\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\022\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031" +
    "\uff7d\032\uff7d\035\uff7d\001\002\000\042\011\uff80\013\uff80" +
    "\014\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\024" +
    "\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80" +
    "\035\uff80\001\002\000\022\004\124\005\103\010\125\034" +
    "\120\037\100\050\126\051\115\055\111\001\002\000\022" +
    "\004\124\005\103\010\125\034\120\037\100\050\126\051" +
    "\115\055\111\001\002\000\022\004\124\005\103\010\125" +
    "\034\120\037\100\050\126\051\115\055\111\001\002\000" +
    "\022\004\124\005\103\010\125\034\120\037\100\050\126" +
    "\051\115\055\111\001\002\000\022\004\124\005\103\010" +
    "\125\034\120\037\100\050\126\051\115\055\111\001\002" +
    "\000\022\004\124\005\103\010\125\034\120\037\100\050" +
    "\126\051\115\055\111\001\002\000\014\011\uff6d\013\uff6d" +
    "\014\uff6d\025\uff6d\026\uff6d\001\002\000\016\011\uff64\013" +
    "\uff64\014\uff64\016\uff64\025\uff64\026\uff64\001\002\000\014" +
    "\011\uff6b\013\uff6b\014\uff6b\025\uff6b\026\uff6b\001\002\000" +
    "\014\011\uff6c\013\uff6c\014\uff6c\025\uff6c\026\uff6c\001\002" +
    "\000\014\011\uff6e\013\uff6e\014\uff6e\025\uff6e\026\uff6e\001" +
    "\002\000\014\011\uff6a\013\uff6a\014\uff6a\025\uff6a\026\uff6a" +
    "\001\002\000\014\011\uff6f\013\uff6f\014\uff6f\025\uff6f\026" +
    "\uff6f\001\002\000\062\003\uffde\007\uffde\015\uffde\017\uffde" +
    "\020\uffde\023\uffde\033\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\045\uffde\046\uffde\052\uffde\054\uffde\056\uffde" +
    "\057\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\001\002\000\062\003\uffe0\007\uffe0\015\uffe0\017\uffe0" +
    "\020\uffe0\023\uffe0\033\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\045\uffe0\046\uffe0\052\uffe0\054\uffe0\056\uffe0" +
    "\057\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\001\002\000\062\003\uffe3\007\uffe3\015\uffe3\017\uffe3" +
    "\020\uffe3\023\uffe3\033\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\045\uffe3\046\uffe3\052\uffe3\054\uffe3\056\uffe3" +
    "\057\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\001\002\000\042\003\310\007\uffce\037\271\043\307" +
    "\045\027\046\033\052\035\054\030\056\044\057\300\061" +
    "\313\062\273\063\301\064\276\065\303\066\274\001\002" +
    "\000\050\003\uffc4\007\uffc4\017\uffc4\020\uffc4\023\uffc4\037" +
    "\uffc4\043\uffc4\045\uffc4\046\uffc4\052\uffc4\054\uffc4\056\uffc4" +
    "\057\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\001\002\000\020\003\u0128\010\u0122\012\u0121\017\u0120" +
    "\020\u0124\023\u0127\037\201\001\002\000\004\007\u016b\001" +
    "\002\000\004\010\u0165\001\002\000\034\003\141\004\124" +
    "\005\103\010\125\014\uff77\034\120\037\100\047\105\050" +
    "\102\051\115\053\123\055\111\070\116\001\002\000\050" +
    "\003\uffc3\007\uffc3\017\uffc3\020\uffc3\023\uffc3\037\uffc3\043" +
    "\uffc3\045\uffc3\046\uffc3\052\uffc3\054\uffc3\056\uffc3\057\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\001" +
    "\002\000\004\010\u0105\001\002\000\050\003\uffc0\007\uffc0" +
    "\017\uffc0\020\uffc0\023\uffc0\037\uffc0\043\uffc0\045\uffc0\046" +
    "\uffc0\052\uffc0\054\uffc0\056\uffc0\057\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\001\002\000\004\010" +
    "\377\001\002\000\004\006\367\001\002\000\050\003\310" +
    "\007\uffce\017\uffce\020\uffce\023\uffce\037\271\043\307\045" +
    "\027\046\033\052\035\054\030\056\044\057\300\061\313" +
    "\062\273\063\301\064\276\065\303\066\274\001\002\000" +
    "\004\014\365\001\002\000\050\003\uffbd\007\uffbd\017\uffbd" +
    "\020\uffbd\023\uffbd\037\uffbd\043\uffbd\045\uffbd\046\uffbd\052" +
    "\uffbd\054\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\001\002\000\050\003\uffc5\007" +
    "\uffc5\017\uffc5\020\uffc5\023\uffc5\037\uffc5\043\uffc5\045\uffc5" +
    "\046\uffc5\052\uffc5\054\uffc5\056\uffc5\057\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000\050" +
    "\003\uffc6\007\uffc6\017\uffc6\020\uffc6\023\uffc6\037\uffc6\043" +
    "\uffc6\045\uffc6\046\uffc6\052\uffc6\054\uffc6\056\uffc6\057\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\001" +
    "\002\000\016\037\362\045\027\046\033\052\035\054\030" +
    "\056\044\001\002\000\050\003\310\007\uffce\017\uffce\020" +
    "\uffce\023\uffce\037\271\043\307\045\027\046\033\052\035" +
    "\054\030\056\044\057\300\061\313\062\273\063\301\064" +
    "\276\065\303\066\274\001\002\000\050\003\uffc1\007\uffc1" +
    "\017\uffc1\020\uffc1\023\uffc1\037\uffc1\043\uffc1\045\uffc1\046" +
    "\uffc1\052\uffc1\054\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000\052\003" +
    "\uffc7\007\uffc7\017\uffc7\020\uffc7\023\uffc7\037\uffc7\043\uffc7" +
    "\045\uffc7\046\uffc7\052\uffc7\054\uffc7\056\uffc7\057\uffc7\060" +
    "\355\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\001\002\000\004\010\314\001\002\000\010\037\uff4e\045" +
    "\320\056\316\001\002\000\004\011\351\001\002\000\004" +
    "\037\uff4f\001\002\000\004\037\321\001\002\000\004\037" +
    "\uff50\001\002\000\004\023\322\001\002\000\010\004\325" +
    "\005\324\037\323\001\002\000\004\014\345\001\002\000" +
    "\004\014\341\001\002\000\004\014\326\001\002\000\032" +
    "\003\141\004\124\005\103\010\125\034\120\037\100\047" +
    "\105\050\102\051\115\053\123\055\111\070\116\001\002" +
    "\000\004\014\330\001\002\000\004\037\331\001\002\000" +
    "\010\017\335\020\333\023\334\001\002\000\004\011\uff52" +
    "\001\002\000\004\020\340\001\002\000\032\003\141\004" +
    "\124\005\103\010\125\034\120\037\100\047\105\050\102" +
    "\051\115\053\123\055\111\070\116\001\002\000\004\017" +
    "\336\001\002\000\004\011\uff4c\001\002\000\004\011\uff4b" +
    "\001\002\000\004\011\uff4d\001\002\000\032\003\141\004" +
    "\124\005\103\010\125\034\120\037\100\047\105\050\102" +
    "\051\115\053\123\055\111\070\116\001\002\000\004\014" +
    "\343\001\002\000\004\037\331\001\002\000\004\011\uff51" +
    "\001\002\000\032\003\141\004\124\005\103\010\125\034" +
    "\120\037\100\047\105\050\102\051\115\053\123\055\111" +
    "\070\116\001\002\000\004\014\347\001\002\000\004\037" +
    "\331\001\002\000\004\011\uff53\001\002\000\004\006\352" +
    "\001\002\000\042\003\310\007\uffce\037\271\043\307\045" +
    "\027\046\033\052\035\054\030\056\044\057\300\061\313" +
    "\062\273\063\301\064\276\065\303\066\274\001\002\000" +
    "\004\007\354\001\002\000\054\003\uffa4\007\uffa4\015\uffa4" +
    "\017\uffa4\020\uffa4\023\uffa4\033\uffa4\037\uffa4\043\uffa4\045" +
    "\uffa4\046\uffa4\052\uffa4\054\uffa4\056\uffa4\057\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000" +
    "\004\006\356\001\002\000\042\003\310\007\uffce\037\271" +
    "\043\307\045\027\046\033\052\035\054\030\056\044\057" +
    "\300\061\313\062\273\063\301\064\276\065\303\066\274" +
    "\001\002\000\004\007\360\001\002\000\054\003\uffa5\007" +
    "\uffa5\015\uffa5\017\uffa5\020\uffa5\023\uffa5\033\uffa5\037\uffa5" +
    "\043\uffa5\045\uffa5\046\uffa5\052\uffa5\054\uffa5\056\uffa5\057" +
    "\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\001\002\000\012\007\uffcd\017\uffcd\020\uffcd\023\uffcd\001" +
    "\002\000\006\003\053\037\201\001\002\000\050\003\uffc2" +
    "\007\uffc2\017\uffc2\020\uffc2\023\uffc2\037\uffc2\043\uffc2\045" +
    "\uffc2\046\uffc2\052\uffc2\054\uffc2\056\uffc2\057\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002\000" +
    "\050\003\uffbc\007\uffbc\017\uffbc\020\uffbc\023\uffbc\037\uffbc" +
    "\043\uffbc\045\uffbc\046\uffbc\052\uffbc\054\uffbc\056\uffbc\057" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\001\002\000\054\003\uff7a\007\uff7a\015\uff7a\017\uff7a\020" +
    "\uff7a\023\uff7a\033\uff7a\037\uff7a\043\uff7a\045\uff7a\046\uff7a" +
    "\052\uff7a\054\uff7a\056\uff7a\057\uff7a\061\uff7a\062\uff7a\063" +
    "\uff7a\064\uff7a\065\uff7a\066\uff7a\001\002\000\012\007\uffcf" +
    "\017\uffcf\020\uffcf\023\uffcf\001\002\000\042\003\310\007" +
    "\uffce\037\271\043\307\045\027\046\033\052\035\054\030" +
    "\056\044\057\300\061\313\062\273\063\301\064\276\065" +
    "\303\066\274\001\002\000\004\007\371\001\002\000\004" +
    "\062\372\001\002\000\004\010\373\001\002\000\032\003" +
    "\141\004\124\005\103\010\125\034\120\037\100\047\105" +
    "\050\102\051\115\053\123\055\111\070\116\001\002\000" +
    "\004\011\375\001\002\000\004\014\376\001\002\000\054" +
    "\003\uffa2\007\uffa2\015\uffa2\017\uffa2\020\uffa2\023\uffa2\033" +
    "\uffa2\037\uffa2\043\uffa2\045\uffa2\046\uffa2\052\uffa2\054\uffa2" +
    "\056\uffa2\057\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\001\002\000\032\003\141\004\124\005\103" +
    "\010\125\034\120\037\100\047\105\050\102\051\115\053" +
    "\123\055\111\070\116\001\002\000\004\011\u0101\001\002" +
    "\000\004\006\u0102\001\002\000\042\003\310\007\uffce\037" +
    "\271\043\307\045\027\046\033\052\035\054\030\056\044" +
    "\057\300\061\313\062\273\063\301\064\276\065\303\066" +
    "\274\001\002\000\004\007\u0104\001\002\000\056\003\uffa6" +
    "\007\uffa6\015\uffa6\017\uffa6\020\uffa6\023\uffa6\033\uffa6\037" +
    "\uffa6\043\uffa6\045\uffa6\046\uffa6\052\uffa6\054\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065" +
    "\uffa6\066\uffa6\001\002\000\004\037\u0106\001\002\000\004" +
    "\011\u0107\001\002\000\004\006\u0108\001\002\000\012\003" +
    "\u010a\007\uff9e\015\u0109\033\u010d\001\002\000\004\016\u0160" +
    "\001\002\000\012\003\u010a\007\uff9e\015\u0109\033\u010d\001" +
    "\002\000\004\007\u015e\001\002\000\016\003\u010a\007\uff9e" +
    "\015\u0109\033\u010d\065\303\066\274\001\002\000\022\004" +
    "\124\005\103\010\125\034\120\037\100\050\126\051\115" +
    "\055\111\001\002\000\004\016\u010f\001\002\000\046\003" +
    "\uff99\007\uff99\015\uff99\033\uff99\037\u0111\043\u0118\045\027" +
    "\046\033\052\035\054\030\056\044\057\300\061\313\062" +
    "\273\063\301\064\276\065\uff99\066\uff99\001\002\000\046" +
    "\003\uff95\007\uff95\015\uff95\033\uff95\037\uff95\043\uff95\045" +
    "\uff95\046\uff95\052\uff95\054\uff95\056\uff95\057\uff95\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\001\002\000" +
    "\020\003\u0128\010\u0122\012\u0121\017\u0120\020\u0124\023\u0127" +
    "\037\201\001\002\000\046\003\uff94\007\uff94\015\uff94\033" +
    "\uff94\037\uff94\043\uff94\045\uff94\046\uff94\052\uff94\054\uff94" +
    "\056\uff94\057\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\001\002\000\046\003\uff92\007\uff92\015\uff92" +
    "\033\uff92\037\uff92\043\uff92\045\uff92\046\uff92\052\uff92\054" +
    "\uff92\056\uff92\057\uff92\061\uff92\062\uff92\063\uff92\064\uff92" +
    "\065\uff92\066\uff92\001\002\000\046\003\uff8f\007\uff8f\015" +
    "\uff8f\033\uff8f\037\uff8f\043\uff8f\045\uff8f\046\uff8f\052\uff8f" +
    "\054\uff8f\056\uff8f\057\uff8f\061\uff8f\062\uff8f\063\uff8f\064" +
    "\uff8f\065\uff8f\066\uff8f\001\002\000\016\003\uff9c\007\uff9c" +
    "\015\uff9c\033\uff9c\065\uff9c\066\uff9c\001\002\000\046\003" +
    "\uff96\007\uff96\015\uff96\033\uff96\037\uff96\043\uff96\045\uff96" +
    "\046\uff96\052\uff96\054\uff96\056\uff96\057\uff96\061\uff96\062" +
    "\uff96\063\uff96\064\uff96\065\uff96\066\uff96\001\002\000\046" +
    "\003\uff97\007\uff97\015\uff97\033\uff97\037\uff97\043\uff97\045" +
    "\uff97\046\uff97\052\uff97\054\uff97\056\uff97\057\uff97\061\uff97" +
    "\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\001\002\000" +
    "\016\037\u011c\045\027\046\033\052\035\054\030\056\044" +
    "\001\002\000\046\003\uff99\007\uff99\015\uff99\033\uff99\037" +
    "\u0111\043\u0118\045\027\046\033\052\035\054\030\056\044" +
    "\057\300\061\313\062\273\063\301\064\276\065\uff99\066" +
    "\uff99\001\002\000\050\003\uff98\007\uff98\015\uff98\033\uff98" +
    "\037\uff98\043\uff98\045\uff98\046\uff98\052\uff98\054\uff98\056" +
    "\uff98\057\uff98\060\355\061\uff98\062\uff98\063\uff98\064\uff98" +
    "\065\uff98\066\uff98\001\002\000\016\003\uff9a\007\uff9a\015" +
    "\uff9a\033\uff9a\065\uff9a\066\uff9a\001\002\000\006\003\053" +
    "\037\201\001\002\000\046\003\uff93\007\uff93\015\uff93\033" +
    "\uff93\037\uff93\043\uff93\045\uff93\046\uff93\052\uff93\054\uff93" +
    "\056\uff93\057\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\001\002\000\046\003\uff8e\007\uff8e\015\uff8e" +
    "\033\uff8e\037\uff8e\043\uff8e\045\uff8e\046\uff8e\052\uff8e\054" +
    "\uff8e\056\uff8e\057\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e" +
    "\065\uff8e\066\uff8e\001\002\000\034\003\117\004\124\005" +
    "\103\010\125\034\120\037\100\047\105\050\102\051\115" +
    "\053\123\055\111\067\112\070\116\001\002\000\004\017" +
    "\u0157\001\002\000\004\037\u014c\001\002\000\036\003\141" +
    "\004\124\005\103\010\125\011\u013a\034\120\037\100\047" +
    "\105\050\102\051\115\053\123\055\111\067\156\070\116" +
    "\001\002\000\046\003\uff91\007\uff91\015\uff91\033\uff91\037" +
    "\uff91\043\uff91\045\uff91\046\uff91\052\uff91\054\uff91\056\uff91" +
    "\057\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066" +
    "\uff91\001\002\000\006\020\u0137\023\u0135\001\002\000\046" +
    "\003\uff90\007\uff90\015\uff90\033\uff90\037\uff90\043\uff90\045" +
    "\uff90\046\uff90\052\uff90\054\uff90\056\uff90\057\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\001\002\000" +
    "\010\017\u012f\020\u012d\023\u0127\001\002\000\034\003\uffac" +
    "\004\uffac\005\uffac\010\uffac\034\uffac\037\uffac\047\uffac\050" +
    "\uffac\051\uffac\053\uffac\055\uffac\067\uffac\070\uffac\001\002" +
    "\000\050\003\310\014\266\017\uffce\020\uffce\023\uffce\037" +
    "\271\043\307\045\027\046\033\052\035\054\030\056\044" +
    "\057\300\061\313\062\273\063\301\064\276\065\303\066" +
    "\274\001\002\000\054\003\uffbb\007\uffbb\015\uffbb\017\uffbb" +
    "\020\uffbb\023\uffbb\033\uffbb\037\uffbb\043\uffbb\045\uffbb\046" +
    "\uffbb\052\uffbb\054\uffbb\056\uffbb\057\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000\004\014" +
    "\u012b\001\002\000\054\003\uffb6\007\uffb6\015\uffb6\017\uffb6" +
    "\020\uffb6\023\uffb6\033\uffb6\037\uffb6\043\uffb6\045\uffb6\046" +
    "\uffb6\052\uffb6\054\uffb6\056\uffb6\057\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000\010\017" +
    "\uffad\020\uffad\023\uffad\001\002\000\006\020\u0134\023\u0135" +
    "\001\002\000\034\003\117\004\124\005\103\010\125\034" +
    "\120\037\100\047\105\050\102\051\115\053\123\055\111" +
    "\067\112\070\116\001\002\000\004\017\u0130\001\002\000" +
    "\004\014\u0131\001\002\000\054\003\uffa7\007\uffa7\015\uffa7" +
    "\017\uffa7\020\uffa7\023\uffa7\033\uffa7\037\uffa7\043\uffa7\045" +
    "\uffa7\046\uffa7\052\uffa7\054\uffa7\056\uffa7\057\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\001\002\000" +
    "\004\014\u0133\001\002\000\054\003\uffba\007\uffba\015\uffba" +
    "\017\uffba\020\uffba\023\uffba\033\uffba\037\uffba\043\uffba\045" +
    "\uffba\046\uffba\052\uffba\054\uffba\056\uffba\057\uffba\061\uffba" +
    "\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001\002\000" +
    "\004\014\u0136\001\002\000\034\003\uffab\004\uffab\005\uffab" +
    "\010\uffab\034\uffab\037\uffab\047\uffab\050\uffab\051\uffab\053" +
    "\uffab\055\uffab\067\uffab\070\uffab\001\002\000\054\003\uffa8" +
    "\007\uffa8\015\uffa8\017\uffa8\020\uffa8\023\uffa8\033\uffa8\037" +
    "\uffa8\043\uffa8\045\uffa8\046\uffa8\052\uffa8\054\uffa8\056\uffa8" +
    "\057\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\001\002\000\004\014\u0138\001\002\000\054\003\uffaa" +
    "\007\uffaa\015\uffaa\017\uffaa\020\uffaa\023\uffaa\033\uffaa\037" +
    "\uffaa\043\uffaa\045\uffaa\046\uffaa\052\uffaa\054\uffaa\056\uffaa" +
    "\057\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\001\002\000\004\011\u0144\001\002\000\010\003\u013b" +
    "\012\u0121\014\u013e\001\002\000\046\003\310\017\uffce\020" +
    "\uffce\023\uffce\037\271\043\307\045\027\046\033\052\035" +
    "\054\030\056\044\057\300\061\313\062\273\063\301\064" +
    "\276\065\303\066\274\001\002\000\006\020\u0140\023\u0127" +
    "\001\002\000\004\014\u013f\001\002\000\054\003\uffb5\007" +
    "\uffb5\015\uffb5\017\uffb5\020\uffb5\023\uffb5\033\uffb5\037\uffb5" +
    "\043\uffb5\045\uffb5\046\uffb5\052\uffb5\054\uffb5\056\uffb5\057" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\001\002\000\054\003\uffb3\007\uffb3\015\uffb3\017\uffb3\020" +
    "\uffb3\023\uffb3\033\uffb3\037\uffb3\043\uffb3\045\uffb3\046\uffb3" +
    "\052\uffb3\054\uffb3\056\uffb3\057\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000\004\023\u0135" +
    "\001\002\000\034\003\117\004\124\005\103\010\125\034" +
    "\120\037\100\047\105\050\102\051\115\053\123\055\111" +
    "\067\112\070\116\001\002\000\004\014\u0143\001\002\000" +
    "\054\003\uffb9\007\uffb9\015\uffb9\017\uffb9\020\uffb9\023\uffb9" +
    "\033\uffb9\037\uffb9\043\uffb9\045\uffb9\046\uffb9\052\uffb9\054" +
    "\uffb9\056\uffb9\057\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\001\002\000\010\003\u013b\012\u0121\014" +
    "\u0147\001\002\000\006\020\u0140\023\u0127\001\002\000\004" +
    "\014\u0148\001\002\000\054\003\uffb4\007\uffb4\015\uffb4\017" +
    "\uffb4\020\uffb4\023\uffb4\033\uffb4\037\uffb4\043\uffb4\045\uffb4" +
    "\046\uffb4\052\uffb4\054\uffb4\056\uffb4\057\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002\000\054" +
    "\003\uffb2\007\uffb2\015\uffb2\017\uffb2\020\uffb2\023\uffb2\033" +
    "\uffb2\037\uffb2\043\uffb2\045\uffb2\046\uffb2\052\uffb2\054\uffb2" +
    "\056\uffb2\057\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\001\002\000\034\003\117\004\124\005\103" +
    "\010\125\034\120\037\100\047\105\050\102\051\115\053" +
    "\123\055\111\067\112\070\116\001\002\000\004\014\u014b" +
    "\001\002\000\054\003\uffb8\007\uffb8\015\uffb8\017\uffb8\020" +
    "\uffb8\023\uffb8\033\uffb8\037\uffb8\043\uffb8\045\uffb8\046\uffb8" +
    "\052\uffb8\054\uffb8\056\uffb8\057\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\016\003\u013b" +
    "\010\u014f\012\u0121\017\uffae\020\uffae\023\uffae\001\002\000" +
    "\010\017\uffaf\020\uffaf\023\uffaf\001\002\000\004\014\uff41" +
    "\001\002\000\036\003\141\004\124\005\103\010\125\011" +
    "\u0151\034\120\037\100\047\105\050\102\051\115\053\123" +
    "\055\111\067\156\070\116\001\002\000\004\011\u0154\001" +
    "\002\000\010\003\u013b\012\u0121\014\uff3f\001\002\000\010" +
    "\017\uffb1\020\uffb1\023\uffb1\001\002\000\004\014\uff43\001" +
    "\002\000\010\003\u013b\012\u0121\014\uff40\001\002\000\010" +
    "\017\uffb0\020\uffb0\023\uffb0\001\002\000\004\014\uff42\001" +
    "\002\000\004\014\u0158\001\002\000\054\003\uffa9\007\uffa9" +
    "\015\uffa9\017\uffa9\020\uffa9\023\uffa9\033\uffa9\037\uffa9\043" +
    "\uffa9\045\uffa9\046\uffa9\052\uffa9\054\uffa9\056\uffa9\057\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\001" +
    "\002\000\004\014\u015a\001\002\000\054\003\uffb7\007\uffb7" +
    "\015\uffb7\017\uffb7\020\uffb7\023\uffb7\033\uffb7\037\uffb7\043" +
    "\uffb7\045\uffb7\046\uffb7\052\uffb7\054\uffb7\056\uffb7\057\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\001" +
    "\002\000\004\007\uff9f\001\002\000\012\003\u010a\007\uff9e" +
    "\015\u0109\033\u010d\001\002\000\004\007\uffa0\001\002\000" +
    "\054\003\uffa1\007\uffa1\015\uffa1\017\uffa1\020\uffa1\023\uffa1" +
    "\033\uffa1\037\uffa1\043\uffa1\045\uffa1\046\uffa1\052\uffa1\054" +
    "\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1" +
    "\065\uffa1\066\uffa1\001\002\000\004\007\uff9d\001\002\000" +
    "\046\003\uff99\007\uff99\015\uff99\033\uff99\037\u0111\043\u0118" +
    "\045\027\046\033\052\035\054\030\056\044\057\300\061" +
    "\313\062\273\063\301\064\276\065\uff99\066\uff99\001\002" +
    "\000\016\003\uff9b\007\uff9b\015\uff9b\033\uff9b\065\uff9b\066" +
    "\uff9b\001\002\000\004\014\u0164\001\002\000\004\014\uff78" +
    "\001\002\000\054\003\uff79\007\uff79\015\uff79\017\uff79\020" +
    "\uff79\023\uff79\033\uff79\037\uff79\043\uff79\045\uff79\046\uff79" +
    "\052\uff79\054\uff79\056\uff79\057\uff79\061\uff79\062\uff79\063" +
    "\uff79\064\uff79\065\uff79\066\uff79\001\002\000\032\003\141" +
    "\004\124\005\103\010\125\034\120\037\100\047\105\050" +
    "\102\051\115\053\123\055\111\070\116\001\002\000\004" +
    "\011\u0167\001\002\000\004\006\u0168\001\002\000\042\003" +
    "\310\007\uffce\037\271\043\307\045\027\046\033\052\035" +
    "\054\030\056\044\057\300\061\313\062\273\063\301\064" +
    "\276\065\303\066\274\001\002\000\004\007\u016a\001\002" +
    "\000\054\003\uffa3\007\uffa3\015\uffa3\017\uffa3\020\uffa3\023" +
    "\uffa3\033\uffa3\037\uffa3\043\uffa3\045\uffa3\046\uffa3\052\uffa3" +
    "\054\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3\063\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\001\002\000\032\003\ufff1\007\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\045\ufff1\046" +
    "\ufff1\052\ufff1\054\ufff1\056\ufff1\001\002\000\050\003\uffbf" +
    "\007\uffbf\017\uffbf\020\uffbf\023\uffbf\037\uffbf\043\uffbf\045" +
    "\uffbf\046\uffbf\052\uffbf\054\uffbf\056\uffbf\057\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001\002\000" +
    "\050\003\uffbe\007\uffbe\017\uffbe\020\uffbe\023\uffbe\037\uffbe" +
    "\043\uffbe\045\uffbe\046\uffbe\052\uffbe\054\uffbe\056\uffbe\057" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\001\002\000\032\003\uffe8\007\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8\052\uffe8\054\uffe8" +
    "\056\uffe8\001\002\000\014\003\057\010\u017a\013\055\014" +
    "\062\023\060\001\002\000\022\003\066\011\u0171\037\063" +
    "\045\027\046\033\052\035\054\030\056\044\001\002\000" +
    "\004\006\u0177\001\002\000\004\011\u0173\001\002\000\004" +
    "\006\u0174\001\002\000\042\003\310\007\uffce\037\271\043" +
    "\307\045\027\046\033\052\035\054\030\056\044\057\300" +
    "\061\313\062\273\063\301\064\276\065\303\066\274\001" +
    "\002\000\004\007\u0176\001\002\000\032\003\uff4a\007\uff4a" +
    "\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\045\uff4a\046" +
    "\uff4a\052\uff4a\054\uff4a\056\uff4a\001\002\000\042\003\310" +
    "\007\uffce\037\271\043\307\045\027\046\033\052\035\054" +
    "\030\056\044\057\300\061\313\062\273\063\301\064\276" +
    "\065\303\066\274\001\002\000\004\007\u0179\001\002\000" +
    "\032\003\uff49\007\uff49\037\uff49\040\uff49\041\uff49\042\uff49" +
    "\043\uff49\045\uff49\046\uff49\052\uff49\054\uff49\056\uff49\001" +
    "\002\000\022\003\066\011\u017b\037\063\045\027\046\033" +
    "\052\035\054\030\056\044\001\002\000\004\006\uffed\001" +
    "\002\000\004\011\u017d\001\002\000\004\006\uffec\001\002" +
    "\000\032\003\ufff0\007\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\045\ufff0\046\ufff0\052\ufff0\054\ufff0\056\ufff0" +
    "\001\002\000\006\003\053\037\201\001\002\000\032\003" +
    "\uffe9\007\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\045\uffe9\046\uffe9\052\uffe9\054\uffe9\056\uffe9\001\002\000" +
    "\032\003\uffe7\007\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\045\uffe7\046\uffe7\052\uffe7\054\uffe7\056\uffe7\001" +
    "\002\000\004\002\ufff4\001\002\000\032\003\uffe6\007\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\045\uffe6\046" +
    "\uffe6\052\uffe6\054\uffe6\056\uffe6\001\002\000\020\037\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\052\uffd2\054\uffd2\056\uffd2\001" +
    "\002\000\004\006\ufff2\001\002\000\032\003\037\007\uffcb" +
    "\037\025\040\020\041\016\042\013\043\036\045\027\046" +
    "\033\052\035\054\030\056\044\001\002\000\004\007\u0188" +
    "\001\002\000\004\002\ufff3\001\002\000\020\037\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\052\uffd1\054\uffd1\056\uffd1\001\002" +
    "\000\004\006\u018b\001\002\000\032\003\037\007\uffcb\037" +
    "\025\040\020\041\016\042\013\043\036\045\027\046\033" +
    "\052\035\054\030\056\044\001\002\000\004\007\u018d\001" +
    "\002\000\004\002\ufff5\001\002\000\020\003\u018e\036\004" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000" +
    "\014\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\001\002" +
    "\000\006\012\u0191\014\u0192\001\002\000\010\003\u0194\021" +
    "\u0196\037\u0195\001\002\000\020\003\u018e\036\004\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000\014\040" +
    "\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\001\002\000\020" +
    "\003\u018e\036\004\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\001\002\000\006\012\u019a\014\u019b\001\002\000\004" +
    "\014\u0198\001\002\000\014\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\001\002\000\020\003\u018e\036\004\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000\014\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\001\002\000\010" +
    "\003\u0194\021\u0196\037\u0195\001\002\000\020\003\u018e\036" +
    "\004\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002" +
    "\000\014\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\001" +
    "\002\000\014\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\001\002\000\014\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\006\002\006\004\005\001\001\000\002\001" +
    "\001\000\004\004\u018e\001\001\000\010\005\011\016\010" +
    "\070\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\u0189\001\001\000\002\001\001\000\004\013\u0188" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0183\001\001\000\004\070\022\001\001\000\004\013\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\041\007\030\010\031\015\025\016\037" +
    "\021\033\022\042\050\040\001\001\000\004\011\u0182\001" +
    "\001\000\004\011\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\u017f" +
    "\015\025\001\001\000\002\001\001\000\010\010\050\015" +
    "\047\071\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\041\007\030\010\031\015\025\016\037\021" +
    "\044\022\042\050\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u016d\001\001\000\002\001\001\000" +
    "\004\011\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\055\001\001\000\004\011" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\105\035\107\040\120\041\121\043\076\044\106\045" +
    "\113\063\112\064\100\067\103\001\001\000\010\015\066" +
    "\051\067\072\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\066\051\074" +
    "\072\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\224\001\001\000\004\065\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\035\107\041\132" +
    "\043\076\044\130\045\131\063\112\064\100\067\103\001" +
    "\001\000\002\001\001\000\012\035\107\063\126\064\100" +
    "\067\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\035\107\041\144\043\076\063\112\064" +
    "\100\067\103\001\001\000\016\035\107\041\135\043\076" +
    "\063\112\064\100\067\103\001\001\000\002\001\001\000" +
    "\024\035\107\040\143\041\121\043\076\044\106\045\113" +
    "\063\112\064\100\067\103\001\001\000\024\035\107\040" +
    "\141\041\121\043\076\044\106\045\113\063\112\064\100" +
    "\067\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\035\107\040\150\041\121\043\076\044\106\045\113\063" +
    "\112\064\100\067\103\001\001\000\024\035\107\040\147" +
    "\041\121\043\076\044\106\045\113\063\112\064\100\067" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\035\107\040\156\041" +
    "\121\043\076\044\106\045\113\053\154\063\112\064\100" +
    "\067\103\001\001\000\002\001\001\000\004\054\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\035\107" +
    "\040\156\041\121\043\076\044\106\045\113\053\161\063" +
    "\112\064\100\067\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\035\107\040\156\041" +
    "\121\043\076\044\106\045\113\053\165\063\112\064\100" +
    "\067\103\001\001\000\002\001\001\000\004\061\170\001" +
    "\001\000\026\035\107\040\156\041\121\043\076\044\106" +
    "\045\113\053\171\063\112\064\100\067\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\055" +
    "\001\001\000\006\035\107\067\206\001\001\000\002\001" +
    "\001\000\006\035\107\067\204\001\001\000\004\066\205" +
    "\001\001\000\002\001\001\000\004\066\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\035\107\040\156" +
    "\041\121\043\076\044\106\045\113\053\212\063\112\064" +
    "\100\067\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\107\064\222\067\103\001" +
    "\001\000\010\035\107\064\220\067\103\001\001\000\002" +
    "\001\001\000\004\065\221\001\001\000\002\001\001\000" +
    "\004\065\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\035\107\040" +
    "\156\041\121\043\076\044\106\045\113\053\230\063\112" +
    "\064\100\067\103\001\001\000\002\001\001\000\004\026" +
    "\232\001\001\000\002\001\001\000\004\026\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\237\001" +
    "\001\000\002\001\001\000\026\035\107\040\156\041\121" +
    "\043\076\044\106\045\113\053\241\063\112\064\100\067" +
    "\103\001\001\000\002\001\001\000\004\026\243\001\001" +
    "\000\002\001\001\000\004\026\245\001\001\000\002\001" +
    "\001\000\014\035\107\043\262\063\255\064\100\067\103" +
    "\001\001\000\014\035\107\043\261\063\255\064\100\067" +
    "\103\001\001\000\014\035\107\043\260\063\255\064\100" +
    "\067\103\001\001\000\014\035\107\043\257\063\255\064" +
    "\100\067\103\001\001\000\014\035\107\043\256\063\255" +
    "\064\100\067\103\001\001\000\014\035\107\043\254\063" +
    "\255\064\100\067\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\010\276\015" +
    "\025\017\271\020\301\023\311\024\305\025\274\027\304" +
    "\030\267\031\303\036\310\001\001\000\002\001\001\000" +
    "\016\011\u016c\052\u0129\055\u0128\056\u011e\057\u0125\060\u016b" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\035" +
    "\107\037\u0161\040\u0162\041\121\043\076\044\106\045\113" +
    "\063\112\064\100\067\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\276\015\025\017\365\020\301\023" +
    "\311\024\305\025\274\027\304\030\267\031\303\036\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\362\015\025\001\001" +
    "\000\030\010\276\015\025\017\360\020\301\023\311\024" +
    "\305\025\274\027\304\030\267\031\303\036\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\314\062\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\035\107\040\326\041\121\043" +
    "\076\044\106\045\113\063\112\064\100\067\103\001\001" +
    "\000\002\001\001\000\004\047\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\035\107" +
    "\040\336\041\121\043\076\044\106\045\113\063\112\064" +
    "\100\067\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\035\107\040" +
    "\341\041\121\043\076\044\106\045\113\063\112\064\100" +
    "\067\103\001\001\000\002\001\001\000\004\047\343\001" +
    "\001\000\002\001\001\000\024\035\107\040\345\041\121" +
    "\043\076\044\106\045\113\063\112\064\100\067\103\001" +
    "\001\000\002\001\001\000\004\047\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\010\276\015\025\017" +
    "\352\020\301\023\311\024\305\025\274\027\304\030\267" +
    "\031\303\036\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\276\015\025\017\356" +
    "\020\301\023\311\024\305\025\274\027\304\030\267\031" +
    "\303\036\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\010\276\015\025\017\367\020\301\023\311\024" +
    "\305\025\274\027\304\030\267\031\303\036\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\035\107\040\373\041\121\043\076\044\106\045\113" +
    "\063\112\064\100\067\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\035\107\040\377" +
    "\041\121\043\076\044\106\045\113\063\112\064\100\067" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\276\015\025\017\u0102\020\301\023\311\024\305\025" +
    "\274\027\304\030\267\031\303\036\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\u010a\033\u010b\001\001" +
    "\000\002\001\001\000\006\032\u015e\033\u010b\001\001\000" +
    "\002\001\001\000\010\032\u015a\033\u010b\036\u015b\001\001" +
    "\000\014\035\107\043\u010d\063\255\064\100\067\103\001" +
    "\001\000\002\001\001\000\026\010\u0112\015\025\023\u0119" +
    "\024\u0116\025\u0111\027\u0115\030\u010f\031\u0113\034\u0118\042" +
    "\u0114\001\001\000\002\001\001\000\016\011\u0124\052\u0129" +
    "\055\u0128\056\u011e\057\u0125\060\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\u011c\015" +
    "\025\001\001\000\026\010\u0112\015\025\023\u0119\024\u0116" +
    "\025\u0111\027\u0115\030\u010f\031\u0113\034\u0118\042\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\u0158\035\107\040\120\041\121\043\076\044\106\045\113" +
    "\063\112\064\100\067\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\035\107\040\156\041\121\043\076" +
    "\044\106\045\113\053\u0138\063\112\064\100\067\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\u012d\001\001\000\002\001\001\000\030\010" +
    "\276\015\025\017\u012b\020\301\023\311\024\305\025\274" +
    "\027\304\030\267\031\303\036\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\u0131\035\107\040\120\041" +
    "\121\043\076\044\106\045\113\063\112\064\100\067\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\u013c\057\u013b" +
    "\001\001\000\030\010\276\015\025\017\u012b\020\301\023" +
    "\311\024\305\025\274\027\304\030\267\031\303\036\310" +
    "\001\001\000\004\056\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\u0141\035\107\040\120\041\121\043\076\044\106\045" +
    "\113\063\112\064\100\067\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\u0145\057\u0144\001\001\000" +
    "\004\056\u0148\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\u0149\035\107\040\120\041" +
    "\121\043\076\044\106\045\113\063\112\064\100\067\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\u014d\057\u014c\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\035\107\040\156\041\121\043\076\044\106\045" +
    "\113\053\u014f\063\112\064\100\067\103\001\001\000\002" +
    "\001\001\000\006\052\u0152\057\u0151\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\u0155\057\u0154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\u015c\033\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\u0112" +
    "\015\025\023\u0119\024\u0116\025\u0111\027\u0115\030\u010f\031" +
    "\u0113\034\u0118\042\u0160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\035" +
    "\107\040\u0165\041\121\043\076\044\106\045\113\063\112" +
    "\064\100\067\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\276\015\025\017\u0168\020\301\023\311" +
    "\024\305\025\274\027\304\030\267\031\303\036\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\055\001\001\000\010\015\066\051\u0171\072\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\276\015\025\017\u0174\020\301\023\311" +
    "\024\305\025\274\027\304\030\267\031\303\036\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\010\276" +
    "\015\025\017\u0177\020\301\023\311\024\305\025\274\027" +
    "\304\030\267\031\303\036\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\066\051\u017b\072\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u0180\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\041\007" +
    "\030\010\031\015\025\016\037\021\u0186\022\042\050\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\041\007\030\010\031" +
    "\015\025\016\037\021\u018b\022\042\050\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u018e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0196\001" +
    "\001\000\004\004\u0192\001\001\000\002\001\001\000\004" +
    "\004\u019d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u0198\001\001\000\002\001\001" +
    "\000\004\003\u019c\001\001\000\004\004\u019b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
/*declaracion de variables para capturar Strigns para la tabla de simbolos*/
        private String nombreClase = "";
        private String tipoAux = "Int";
        private int  contCambio = 0;
        private ArrayList<Variable> variablesAux = new ArrayList<>();
        private TableSimbol tabla = new TableSimbol();
 /* Connect this parser to a scanner!*/
	public parser(LexerJava analizadorLexico) {
		super(analizadorLexico);
	}

        @Override
        public void syntax_error(Symbol tok) {
	    try{
	        Token token = (Token) tok.value;
	        report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
	    }catch(Exception e){
                e.printStackTrace();
	    }	
	}

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             System.out.println("SE ESPERABA UNA LLAVE FINAL");  
        }else{
             Token token = (Token) cur_token.value;
	     report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= importacion def_clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importacion ::= IMPORT IDD PUNTO item_punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importacion ::= IMPORT IDD PUNTOCOMA importacion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importacion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // importacion ::= error importacion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // item_punto ::= IDD PUNTO item_punto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("item_punto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // item_punto ::= IDD PUNTOCOMA importacion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("item_punto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // item_punto ::= POR PUNTOCOMA importacion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("item_punto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // item_punto ::= error importacion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("item_punto",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_clase ::= visibilidad comodin_Class LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		 System.out.println("se llego al final de la clase con exito ---- }"); tabla.tosting();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_clase",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def_clase ::= FINAL comodin_Class LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		 System.out.println("se llego al final de la clase con exito ---- }"); tabla.tosting();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_clase",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_clase ::= comodin_Class LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		 System.out.println("se llego al final de la clase con exito ---- }"); tabla.tosting();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_clase",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comodin_Class ::= CLASS IDD 
            {
              Object RESULT =null;
		int nomClaseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nomClaseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nomClase = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nombreClase = nomClase.getLexeme(); tabla.capturarClase(nombreClase);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_Class",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_metodo ::= visibilidad comodin_Metod LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_metodo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def_metodo ::= error LLAVEC 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_metodo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comodin_Metod ::= tipo IDD PARENTESISA parametros PARENTESISC 
            {
              Object RESULT =null;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 tabla.capturarMetodo(variablesAux,nomMet.getLexeme(),tipoAux); variablesAux.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_Metod",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comodin_Metod ::= tipo IDD PARENTESISA PARENTESISC 
            {
              Object RESULT =null;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tabla.capturarMetodo(nomMet.getLexeme(),tipoAux);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_Metod",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comodin_Metod ::= IDD IDD PARENTESISA PARENTESISC 
            {
              Object RESULT =null;
		int tipMetodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipMetodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token tipMetod = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tabla.capturarMetodo(nomMet.getLexeme(),tipMetod.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_Metod",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comodin_Metod ::= IDD IDD PARENTESISA parametros PARENTESISC 
            {
              Object RESULT =null;
		int tipMetodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tipMetodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token tipMetod = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 tabla.capturarMetodo(variablesAux,nomMet.getLexeme(),tipMetod.getLexeme()); variablesAux.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_Metod",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_variable ::= visibilidad variables 
            {
              Object RESULT =null;
		 tabla.actualizarVar(true,contCambio); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_variable ::= variables 
            {
              Object RESULT =null;
		 tabla.actualizarVar(true,contCambio); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_variable ::= FINAL variables 
            {
              Object RESULT =null;
		 tabla.actualizarVar(true,contCambio); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_variable ::= visibilidad IDD items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 tabla.actualizarVar(true,contCambio,tipoVar.getLexeme()); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_variable ::= FINAL IDD items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 tabla.actualizarVar(true,contCambio,tipoVar.getLexeme()); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_variable ::= IDD items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 tabla.actualizarVar(true,contCambio,tipoVar.getLexeme()); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variables ::= tipo items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // items_coma ::= IDD items 
            {
              Object RESULT =null;
		int nomVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token nomVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tabla.capturarVariableIndividual(nomVar.getLexeme(), tipoAux); contCambio++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // items_coma ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // items ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // items ::= IGUAL asignacion COMA items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // items ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fin_asignar ::= FINAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_asignar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fin_asignar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_asignar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion ::= condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= NUEVO IDD PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= NUEVO IDD PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= INT 
            {
              Object RESULT =null;
		tipoAux = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		tipoAux = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		tipoAux = "double";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo ::= STRING 
            {
              Object RESULT =null;
		tipoAux = "String";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= CHAR 
            {
              Object RESULT =null;
		tipoAux = "char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // visibilidad ::= PUBLIC fin_asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // visibilidad ::= PROTECTED fin_asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // visibilidad ::= PRIVATE fin_asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias ::= error sentencias 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencias_global ::= sentencia_global sentencias_global 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencias_global ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_global",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia_global ::= constructor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_global ::= def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_global ::= def_metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= def_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= def_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= def_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= def_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= def_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= FINAL variables 
            {
              Object RESULT =null;
		tabla.actualizarVar(false,contCambio); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= salid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= variables 
            {
              Object RESULT =null;
		tabla.actualizarVar(false,contCambio); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= IDD iddOption 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= IDD items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tabla.actualizarVar(false,contCambio,tipoVar.getLexeme()); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= def_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= FINAL IDD items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tabla.actualizarVar(false,contCambio,tipoVar.getLexeme()); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // iddOption ::= increment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // iddOption ::= var_llamad_asigan mas_igual asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // iddOption ::= PARENTESISA PARENTESISC var_llamad_asigan mas_igual asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // iddOption ::= PARENTESISA parametros_llamada PARENTESISC var_llamad_asigan mas_igual asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // iddOption ::= mas_igual asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // iddOption ::= llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // iddOption ::= PARENTESISA PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // iddOption ::= PARENTESISA parametros_llamada PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // iddOption ::= PARENTESISA PARENTESISC llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // iddOption ::= PARENTESISA parametros_llamada PARENTESISC llamada_metod PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddOption",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // var_llamad_asigan ::= PUNTO IDD PARENTESISA PARENTESISC var_llamad_asigan 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // var_llamad_asigan ::= PUNTO IDD PARENTESISA parametros_llamada PARENTESISC var_llamad_asigan 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var_llamad_asigan ::= PUNTO IDD var_llamad_asigan 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var_llamad_asigan ::= PUNTO IDD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // var_llamad_asigan ::= error sentencias 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // mas_igual ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_igual",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // mas_igual ::= MAS IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_igual",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // increment ::= MAS MAS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // increment ::= MENOS MENOS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // increment ::= var_llamad_asigan MAS MAS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // increment ::= var_llamad_asigan MENOS MENOS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // def_if ::= IF PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // def_if_else ::= def_if ELSE LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_if_else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // def_for ::= FOR PARENTESISA condition_for PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // def_while ::= WHILE PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // def_do_while ::= DO LLAVEA sentencias LLAVEC WHILE PARENTESISA condition PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_do_while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // def_switch ::= SWITCH PARENTESISA IDD PARENTESISC LLAVEA cases LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_switch",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cases ::= caso_sw salid cases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cases ::= caso_sw cases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cases ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cases ::= error cases 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // caso_sw ::= CASO agrupation DOPUNTO sentencias_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // caso_sw ::= DEFAULT DOPUNTO sentencias_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_sw",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencias_switch ::= factor_casos sentencias_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_switch",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencias_switch ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_switch",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor_casos ::= def_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor_casos ::= def_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor_casos ::= def_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor_casos ::= def_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor_casos ::= def_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // factor_casos ::= FINAL variables 
            {
              Object RESULT =null;
		tabla.actualizarVar(false,contCambio); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor_casos ::= variables 
            {
              Object RESULT =null;
		tabla.actualizarVar(false,contCambio); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor_casos ::= IDD iddOption 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor_casos ::= IDD items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tabla.actualizarVar(false,contCambio,tipoVar.getLexeme()); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor_casos ::= def_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // factor_casos ::= FINAL IDD items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tabla.actualizarVar(false,contCambio,tipoVar.getLexeme()); contCambio = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // terminal_casos ::= IDD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // terminal_casos ::= IDD acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // terminal_casos ::= IDD PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // terminal_casos ::= IDD PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // terminal_casos ::= IDD PARENTESISA PARENTESISC acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // terminal_casos ::= IDD PARENTESISA parametros_llamada PARENTESISC acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // terminal_casos ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // terminal_casos ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // terminal_casos ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // terminal_casos ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // terminal_casos ::= ENTERON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // terminal_casos ::= DECIMALN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // acceso_termin_var_metod ::= PUNTO IDD PARENTESISA PARENTESISC acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // acceso_termin_var_metod ::= PUNTO IDD PARENTESISA parametros_llamada PARENTESISC acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // acceso_termin_var_metod ::= PUNTO IDD acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // acceso_termin_var_metod ::= PUNTO IDD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // acceso_termin_var_metod ::= PUNTO IDD PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // acceso_termin_var_metod ::= PUNTO IDD PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // acceso_termin_var_metod ::= error PARENTESISC 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // salid ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salid",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // salid ::= RETURN retorno PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salid",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // retorno ::= condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // retorno ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // condition ::= logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // condition ::= def_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // condition ::= def_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // condition ::= NEGATION def_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // condition ::= NEGATION def_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // condition ::= NEGATION logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // condition ::= error PARENTESISC 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // logica ::= agrupation MAYORQ agrupation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // logica ::= agrupation MENORQ agrupation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // logica ::= agrupation MAYOROI agrupation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // logica ::= agrupation MENOROI agrupation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // logica ::= agrupation NOTEQUALS agrupation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // logica ::= agrupation EQUALS agrupation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // logica ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // logica ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // logica ::= e_inicial 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // logica ::= CADENA PUNTO PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // logica ::= CADENA PUNTO PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // agrupation ::= e_inicial 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agrupation",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // e_inicial ::= t_production e_pri 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_inicial",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // e_pri ::= MAS t_production e_pri 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_pri",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // e_pri ::= MENOS t_production e_pri 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_pri",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // e_pri ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_pri",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // t_production ::= f_terminal t_pri 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_production",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // t_pri ::= POR f_terminal t_pri 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_pri",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // t_pri ::= DIVISION f_terminal t_pri 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_pri",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // t_pri ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_pri",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // f_terminal ::= PARENTESISA e_inicial PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_terminal",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // f_terminal ::= terminal_casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f_terminal",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // def_and ::= logica AND logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_and",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // def_and ::= logica AND logica AND condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_and",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // def_and ::= logica AND logica OR condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_and",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // def_or ::= logica OR logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_or",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // def_or ::= logica OR logica OR condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_or",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // def_or ::= logica OR logica AND condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_or",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // condition_for ::= var_iterador IDD IGUAL IDD PUNTOCOMA condition PUNTOCOMA operation_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // condition_for ::= var_iterador IDD IGUAL ENTERO PUNTOCOMA condition PUNTOCOMA operation_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condition_for ::= var_iterador IDD IGUAL DECIMAL PUNTOCOMA condition PUNTOCOMA operation_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_for",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // var_iterador ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // var_iterador ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // var_iterador ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_iterador",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // operation_for ::= IDD MAS MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_for",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // operation_for ::= IDD MENOS MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_for",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // operation_for ::= IDD IGUAL condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_for",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // constructor ::= visibilidad IDD PARENTESISA parametros PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // constructor ::= visibilidad IDD PARENTESISA PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // parametros ::= comodin_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // parametros ::= comodin_param COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // parametros ::= error PARENTESISC 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // comodin_param ::= tipo IDD 
            {
              Object RESULT =null;
		int nomParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nomParright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nomPar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 variablesAux.add(new Variable(nomPar.getLexeme(),tipoAux));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_param",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // comodin_param ::= IDD IDD 
            {
              Object RESULT =null;
		int tipoParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoParright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoPar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nomParleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nomParright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nomPar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 variablesAux.add(new Variable(nomPar.getLexeme(),tipoPar.getLexeme()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodin_param",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // llamada_metod ::= PUNTO IDD PARENTESISA PARENTESISC llamada_metod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // llamada_metod ::= PUNTO IDD PARENTESISA parametros_llamada PARENTESISC llamada_metod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // llamada_metod ::= PUNTO IDD llamada_metod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // llamada_metod ::= PUNTO IDD PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // llamada_metod ::= PUNTO IDD PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metod",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // parametros_llamada ::= condition COMA parametros_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // parametros_llamada ::= condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // parametros_llamada ::= NUEVO recurcion_new 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // recurcion_new ::= IDD PARENTESISA parametros_llamada PARENTESISC siguiente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recurcion_new",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // recurcion_new ::= IDD PARENTESISA PARENTESISC siguiente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recurcion_new",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // siguiente ::= COMA parametros_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("siguiente",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // siguiente ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("siguiente",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
