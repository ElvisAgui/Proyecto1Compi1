
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladores1.appcliente.analizadores.json;

import com.compiladores1.appcliente.analizadores.json.sym;
import com.compiladores1.appcliente.analizadores.json.LexerJson;
import java_cup.runtime.*;
import com.compiladores1.appcliente.analizadores.Token;
import com.compiladores1.appcliente.tableSimbol.TableSimbol;
import com.compiladores1.appcliente.erros.Errors;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\005\000\002\021" +
    "\007\000\002\006\010\000\002\006\010\000\002\006\004" +
    "\000\002\003\010\000\002\003\007\000\002\003\004\000" +
    "\002\004\007\000\002\004\005\000\002\004\004\000\002" +
    "\005\007\000\002\005\004\000\002\007\010\000\002\007" +
    "\007\000\002\007\004\000\002\011\007\000\002\011\005" +
    "\000\002\011\004\000\002\010\007\000\002\010\004\000" +
    "\002\012\007\000\002\012\004\000\002\013\007\000\002" +
    "\013\004\000\002\014\007\000\002\014\004\000\002\020" +
    "\004\000\002\022\007\000\002\022\005\000\002\022\006" +
    "\000\002\022\006\000\002\022\004\000\002\023\004\000" +
    "\002\023\002\000\002\023\004\000\002\034\005\000\002" +
    "\034\004\000\002\024\010\000\002\024\007\000\002\024" +
    "\004\000\002\025\007\000\002\025\005\000\002\025\004" +
    "\000\002\017\007\000\002\017\004\000\002\027\007\000" +
    "\002\027\004\000\002\030\007\000\002\030\004\000\002" +
    "\026\005\000\002\026\004\000\002\015\007\000\002\015" +
    "\006\000\002\015\004\000\002\033\007\000\002\033\005" +
    "\000\002\032\007\000\002\032\004\000\002\031\004\000" +
    "\002\031\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\013\004\001\002\000\006\003\010\015" +
    "\011\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\014\264\001\002\000\006\003\014\016" +
    "\015\001\002\000\004\004\253\001\002\000\006\003\014" +
    "\016\015\001\002\000\006\003\043\017\044\001\002\000" +
    "\006\003\043\017\044\001\002\000\004\004\016\001\002" +
    "\000\004\011\017\001\002\000\010\003\020\012\022\013" +
    "\021\001\002\000\004\014\042\001\002\000\006\003\027" +
    "\024\030\001\002\000\004\005\026\001\002\000\004\012" +
    "\024\001\002\000\004\005\025\001\002\000\010\003\ufffb" +
    "\016\ufffb\017\ufffb\001\002\000\010\003\ufffa\016\ufffa\017" +
    "\ufffa\001\002\000\004\014\041\001\002\000\004\004\035" +
    "\001\002\000\004\014\032\001\002\000\006\005\033\012" +
    "\ufff7\001\002\000\006\003\020\013\021\001\002\000\004" +
    "\012\ufff8\001\002\000\004\010\036\001\002\000\004\027" +
    "\037\001\002\000\004\010\040\001\002\000\004\014\ufff5" +
    "\001\002\000\004\014\ufff4\001\002\000\004\012\ufff6\001" +
    "\002\000\006\003\142\020\144\001\002\000\004\004\046" +
    "\001\002\000\010\003\ufff9\016\ufff9\017\ufff9\001\002\000" +
    "\004\011\047\001\002\000\010\003\051\012\052\013\050" +
    "\001\002\000\006\003\061\024\062\001\002\000\004\014" +
    "\057\001\002\000\004\005\056\001\002\000\004\012\054" +
    "\001\002\000\004\005\055\001\002\000\012\003\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\001\002\000\012\003\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\001\002\000\004\012\uffee\001\002\000" +
    "\004\014\137\001\002\000\006\005\135\014\136\001\002" +
    "\000\004\004\131\001\002\000\004\005\064\001\002\000" +
    "\006\003\065\023\067\001\002\000\004\005\130\001\002" +
    "\000\004\005\074\001\002\000\004\004\070\001\002\000" +
    "\004\010\071\001\002\000\004\027\072\001\002\000\004" +
    "\010\073\001\002\000\004\005\uffe9\001\002\000\006\003" +
    "\075\022\076\001\002\000\004\014\127\001\002\000\004" +
    "\004\100\001\002\000\004\014\uffed\001\002\000\004\010" +
    "\101\001\002\000\006\003\103\027\105\001\002\000\004" +
    "\010\126\001\002\000\004\010\125\001\002\000\010\003" +
    "\117\005\115\010\uffde\001\002\000\006\005\106\027\107" +
    "\001\002\000\004\027\113\001\002\000\004\005\110\001" +
    "\002\000\004\027\111\001\002\000\012\003\uffe1\005\uffe1" +
    "\010\uffe1\027\112\001\002\000\010\003\uffe4\005\uffe4\010" +
    "\uffe4\001\002\000\012\003\uffe3\005\uffe3\010\uffe3\027\114" +
    "\001\002\000\010\003\uffe2\005\uffe2\010\uffe2\001\002\000" +
    "\004\027\123\001\002\000\004\010\uffe5\001\002\000\004" +
    "\010\122\001\002\000\010\003\117\005\115\010\uffde\001" +
    "\002\000\004\010\uffdf\001\002\000\004\010\uffdd\001\002" +
    "\000\012\003\uffdb\005\uffdb\010\uffdb\027\124\001\002\000" +
    "\010\003\uffdc\005\uffdc\010\uffdc\001\002\000\010\003\uffe0" +
    "\005\uffe0\010\uffe0\001\002\000\004\014\uffe7\001\002\000" +
    "\004\014\uffe6\001\002\000\004\005\uffe8\001\002\000\004" +
    "\010\132\001\002\000\004\027\133\001\002\000\004\010" +
    "\134\001\002\000\004\005\uffeb\001\002\000\004\005\uffea" +
    "\001\002\000\004\014\uffec\001\002\000\006\005\140\012" +
    "\uffef\001\002\000\006\003\051\013\050\001\002\000\004" +
    "\012\ufff0\001\002\000\006\003\214\021\216\001\002\000" +
    "\012\003\ufff1\016\ufff1\017\ufff1\020\ufff1\001\002\000\004" +
    "\004\145\001\002\000\004\011\146\001\002\000\010\003" +
    "\150\012\152\013\151\001\002\000\004\012\212\001\002" +
    "\000\004\014\211\001\002\000\006\003\155\024\157\001" +
    "\002\000\004\005\153\001\002\000\014\003\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\001\002\000\004\005\171\001" +
    "\002\000\006\005\167\014\170\001\002\000\004\014\164" +
    "\001\002\000\004\004\160\001\002\000\004\010\161\001" +
    "\002\000\004\027\162\001\002\000\004\010\163\001\002" +
    "\000\004\005\uffd2\001\002\000\006\005\165\012\uffd6\001" +
    "\002\000\006\003\150\013\151\001\002\000\004\012\uffd7" +
    "\001\002\000\004\005\uffd1\001\002\000\004\014\uffd3\001" +
    "\002\000\006\003\172\023\174\001\002\000\004\005\210" +
    "\001\002\000\004\005\201\001\002\000\004\004\175\001" +
    "\002\000\004\010\176\001\002\000\004\027\177\001\002" +
    "\000\004\010\200\001\002\000\004\005\uffd0\001\002\000" +
    "\006\003\203\025\204\001\002\000\004\014\uffd4\001\002" +
    "\000\004\014\207\001\002\000\004\004\205\001\002\000" +
    "\004\006\206\001\002\000\004\014\uffce\001\002\000\004" +
    "\014\uffcd\001\002\000\004\005\uffcf\001\002\000\004\012" +
    "\uffd5\001\002\000\004\005\213\001\002\000\014\003\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\001\002\000\004\014" +
    "\247\001\002\000\014\003\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\001\002\000\004\004\217\001\002\000\004\011" +
    "\220\001\002\000\006\012\223\013\222\001\002\000\004" +
    "\012\246\001\002\000\006\003\225\026\224\001\002\000" +
    "\016\003\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\001\002\000\004\004\233\001\002\000\004\014\232\001" +
    "\002\000\004\014\227\001\002\000\006\005\230\012\uffc8" +
    "\001\002\000\004\013\222\001\002\000\004\012\uffc9\001" +
    "\002\000\004\014\uffc6\001\002\000\004\010\234\001\002" +
    "\000\012\003\237\005\235\027\242\030\241\001\002\000" +
    "\014\003\uffc1\005\uffc1\010\uffc1\027\uffc1\030\uffc1\001\002" +
    "\000\004\010\245\001\002\000\004\010\244\001\002\000" +
    "\014\003\237\005\235\010\uffc4\027\242\030\241\001\002" +
    "\000\014\003\uffc2\005\uffc2\010\uffc2\027\uffc2\030\uffc2\001" +
    "\002\000\014\003\uffc3\005\uffc3\010\uffc3\027\uffc3\030\uffc3" +
    "\001\002\000\004\010\uffc5\001\002\000\014\003\uffc0\005" +
    "\uffc0\010\uffc0\027\uffc0\030\uffc0\001\002\000\004\014\uffc7" +
    "\001\002\000\016\003\uffcc\014\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\001\002\000\016\003\uffca\014\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\001\002\000\006\003\142\020" +
    "\144\001\002\000\006\003\214\021\216\001\002\000\004" +
    "\014\uffff\001\002\000\004\010\254\001\002\000\006\006" +
    "\256\007\255\001\002\000\004\010\261\001\002\000\004" +
    "\010\257\001\002\000\004\005\260\001\002\000\006\003" +
    "\ufffe\016\ufffe\001\002\000\004\005\262\001\002\000\006" +
    "\003\ufffd\016\ufffd\001\002\000\006\003\ufffc\016\ufffc\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\002\004\001\001\000\006\006\011\021" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\262\001\001\000\002\001\001\000" +
    "\004\003\012\001\001\000\004\007\247\001\001\000\004" +
    "\007\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\022\001\001\000\002\001\001\000\004\005\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\052\001\001\000\006\010\057\012\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\101" +
    "\022\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\115\034\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\120\034\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\140\001\001\000\002\001\001\000" +
    "\004\015\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\155\027\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\220\001\001\000\002\001\001\000" +
    "\004\032\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\237\031\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\237\031\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\250\001" +
    "\001\000\004\015\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
/*declaracion de variables para capturar Strigns para la tabla de simbolos*/

 /* Connect this parser to a scanner!*/
        private TableSimbol tabla = new TableSimbol();
        private String nombreVariable = "";
        private String tipoVariable = "";
        private String funcionPadre="";
        private String nombreMetodo ="";
        private String tipoMetodo="";
        private String parametros="";
        private String segComenario= "";
        private ArrayList<Errors> errores = new ArrayList<>();

	public parser(LexerJson analizadorLexico) {
		super(analizadorLexico);
	}

        @Override
        public void syntax_error(Symbol tok) {
                String esperado = "un terminal xd";
	    try{
                List<Integer> lista=expected_token_ids();
                if(!lista.isEmpty()){
                       if(lista.get(0)<=50){
                               esperado = sym.terminalNames[lista.get(0)];
                       } 
                }
	        Token token = (Token) tok.value;
	        report_error("",null);
                errores.add(new Errors(token.getLexeme(),token.getLine(),token.getColumn(),"Se esperaba :"+esperado,"Sintactico"));
            }catch(Exception e){
                Token token = (Token) tok.value;
	        report_error("",null);
                errores.add(new Errors(token.getLexeme(),token.getLine(),token.getColumn(),"Se esperaba :"+esperado,"Sintactico"));
	    }	
	}


    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             System.out.println("SE ESPERABA UNA LLAVE FINAL");  
             errores.add(new Errors("",0,0,"Se llego al final, se esperaba el terminal de Cierre","Sintactico"));

        }else{
             Token token = (Token) cur_token.value;
	     report_error("",null);
             errores.add(new Errors(token.getLexeme(),token.getLine(),token.getColumn(),"No se pude recuperar de manera correcta","Sintactico"));
        }
    }

        @Override
        public List<Integer> expected_token_ids() {
                return super.expected_token_ids();
        }

      public ArrayList<Errors> getErrores() {
        return errores;
    }

    public void setErrores(ArrayList<Errors> errores) {
        this.errores = errores;
    } 
     
     public TableSimbol getTabla() {
        return tabla;
    }

    public void setTabla(TableSimbol tabla) {
        this.tabla = tabla;
    }
   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= LLAVEA componentes LLAVEC 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // componentes ::= def_score def_clase def_variable def_metodo def_coment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("componentes",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // def_score ::= SCORE DOSPUNTO COMILLAS ENTERO COMILLAS COMA 
            {
              Object RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token score = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tabla.capturaScore(score.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_score",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def_score ::= SCORE DOSPUNTO COMILLAS DECIMAL COMILLAS COMA 
            {
              Object RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token score = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tabla.capturaScore(score.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_score",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_score ::= error def_clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_score",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // def_clase ::= CLASES DOSPUNTO CORCHETEA clases CORCHETEC COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_clase",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // def_clase ::= CLASES DOSPUNTO CORCHETEA CORCHETEC COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_clase",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // def_clase ::= error def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_clase",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clases ::= LLAVEA clase LLAVEC COMA clases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clases",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // clases ::= LLAVEA clase LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clases",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // clases ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clases",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // clase ::= NOMBRE DOSPUNTO COMILLAS IDD COMILLAS 
            {
              Object RESULT =null;
		int nomClaseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomClaseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token nomClase = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tabla.caputraClase(nomClase.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // clase ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_variable ::= VARIBALES DOSPUNTO CORCHETEA variables CORCHETEC COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_variable ::= VARIBALES DOSPUNTO CORCHETEA CORCHETEC COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_variable ::= error def_metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= LLAVEA variable LLAVEC COMA variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables ::= LLAVEA variable LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variables ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable ::= nom_Var COMA tipo_Var COMA funtions 
            {
              Object RESULT =null;
		tabla.capturaVar(nombreVariable, tipoVariable,funcionPadre);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nom_Var ::= NOMBRE DOSPUNTO COMILLAS IDD COMILLAS 
            {
              Object RESULT =null;
		int nomVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token nomVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		nombreVariable = nomVar.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nom_Var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nom_Var ::= error COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nom_Var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_Var ::= TIPO DOSPUNTO COMILLAS IDD COMILLAS 
            {
              Object RESULT =null;
		int tipoVArleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoVArright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoVAr = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tipoVariable = tipoVAr.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_Var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_Var ::= error COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_Var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funtions ::= FUNCION DOSPUNTO COMILLAS funcion_padre COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funtions",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funtions ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funtions",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcion_padre ::= fun_oblig fun_Items 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_padre",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fun_oblig ::= IDD IDD COMA IDD IDD 
            {
              Object RESULT =null;
		int tipo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tipo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token tipo1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int funPadre1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funPadre1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token funPadre1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipo2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funPadre2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funPadre2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token funPadre2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		funcionPadre =tipo1.getLexeme()+" "+funPadre1.getLexeme()+ ","+ tipo2.getLexeme()+" "+ funPadre2.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_oblig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fun_oblig ::= IDD COMA IDD 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token fun = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funcionPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token funcionP = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		funcionPadre =fun.getLexeme() +","+ funcionP.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_oblig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fun_oblig ::= IDD COMA IDD IDD 
            {
              Object RESULT =null;
		int funPadre1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funPadre1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token funPadre1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipo2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funPadre2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funPadre2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token funPadre2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		funcionPadre = funPadre1.getLexeme()+ ","+tipo2.getLexeme()+" "+ funPadre2.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_oblig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // fun_oblig ::= IDD IDD COMA IDD 
            {
              Object RESULT =null;
		int tipo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token tipo1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int funcionPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int funcionPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token funcionP = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token fun = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		funcionPadre =tipo1.getLexeme()+" "+funcionP.getLexeme()+","+fun.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_oblig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // fun_oblig ::= error COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_oblig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fun_Items ::= comodinItem fun_Items 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_Items",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fun_Items ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_Items",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fun_Items ::= error COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_Items",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comodinItem ::= COMA IDD IDD 
            {
              Object RESULT =null;
		int tipo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipo1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcionPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token funcionP = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		funcionPadre+= ","+tipo1.getLexeme()+" "+funcionP.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinItem",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comodinItem ::= COMA IDD 
            {
              Object RESULT =null;
		int funcionPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token funcionP = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		funcionPadre+= ","+ funcionP.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinItem",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // def_metodo ::= METODOS DOSPUNTO CORCHETEA metods CORCHETEC COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // def_metodo ::= METODOS DOSPUNTO CORCHETEA CORCHETEC COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // def_metodo ::= error def_coment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_metodo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // metods ::= LLAVEA metodo LLAVEC COMA metods 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metods",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // metods ::= LLAVEA metodo LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metods",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // metods ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metods",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // metodo ::= nom_Metod COMA tipo_Metod COMA parametros 
            {
              Object RESULT =null;
		tabla.capturarMetodo(nombreMetodo, tipoMetodo, parametros);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // metodo ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nom_Metod ::= NOMBRE DOSPUNTO COMILLAS IDD COMILLAS 
            {
              Object RESULT =null;
		int nomMetodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomMetodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token nomMetodo = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		nombreMetodo=nomMetodo.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nom_Metod",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nom_Metod ::= error COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nom_Metod",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_Metod ::= TIPO DOSPUNTO COMILLAS IDD COMILLAS 
            {
              Object RESULT =null;
		int tipoMetodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipoMetodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tipoMetod = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tipoMetodo = tipoMetod.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_Metod",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_Metod ::= error COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_Metod",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros ::= PARAMTETROS DOSPUNTO ENTERO 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token param = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parametros=param.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // def_coment ::= COMENTARIOS DOSPUNTO CORCHETEA coments CORCHETEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_coment",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // def_coment ::= COMENTARIOS DOSPUNTO CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_coment",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // def_coment ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_coment",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // coments ::= LLAVEA text LLAVEC COMA coments 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("coments",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // coments ::= LLAVEA text LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("coments",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // text ::= TEXTO DOSPUNTO COMILLAS idd_Coment COMILLAS 
            {
              Object RESULT =null;
		tabla.capturarComentario(segComenario); segComenario="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // text ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // idd_Coment ::= comodinComent idd_Coment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idd_Coment",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // idd_Coment ::= comodinComent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idd_Coment",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comodinComent ::= IDD 
            {
              Object RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token comentario = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		segComenario+=" " +comentario.getLexeme()+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinComent",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comodinComent ::= ALGO 
            {
              Object RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token comentario = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		segComenario+=" "+ comentario.getLexeme()+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinComent",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comodinComent ::= COMA 
            {
              Object RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token comentario = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		segComenario+=" "+ comentario.getLexeme()+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinComent",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comodinComent ::= error COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinComent",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
