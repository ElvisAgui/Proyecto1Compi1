
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladores1.appcliente.analizadores;

import java_cup.runtime.*;
import com.compiladores1.appcliente.analizadores.*;
import com.compiladores1.appcliente.tableSimbol.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parserhtml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parserhtml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parserhtml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parserhtml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\233\000\002\002\004\000\002\017\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\004\004\000\002\005\004\000\002\006\004\000" +
    "\002\006\004\000\002\021\003\000\002\007\004\000\002" +
    "\007\005\000\002\007\004\000\002\007\003\000\002\010" +
    "\004\000\002\025\005\000\002\025\003\000\002\025\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\005\000" +
    "\002\026\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\003" +
    "\004\000\002\013\004\000\002\014\004\000\002\014\005" +
    "\000\002\014\004\000\002\014\003\000\002\015\004\000" +
    "\002\022\003\000\002\016\004\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\005\000\002\027\005\000\002\030\003\000" +
    "\002\030\010\000\002\030\010\000\002\030\010\000\002" +
    "\030\010\000\002\030\010\000\002\030\010\000\002\030" +
    "\010\000\002\031\005\000\002\031\005\000\002\034\010" +
    "\000\002\033\003\000\002\033\003\000\002\020\006\000" +
    "\002\011\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\023\005\000\002\036\005\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\004\000\002\012\003\000\002\012\004\000\002\012\003" +
    "\000\002\037\004\000\002\037\004\000\002\037\002\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\041\007" +
    "\000\002\041\007\000\002\042\005\000\002\043\005\000" +
    "\002\043\004\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\024" +
    "\004\000\002\024\003\000\002\045\005\000\002\045\004" +
    "\000\002\046\005\000\002\046\004\000\002\047\004\000" +
    "\002\047\004\000\002\047\003\000\002\047\003\000\002" +
    "\047\004\000\002\047\003\000\002\050\015\000\002\050" +
    "\015\000\002\050\014\000\002\051\005\000\002\051\004" +
    "\000\002\052\004\000\002\052\004\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\004\000\002" +
    "\053\005\000\002\053\004\000\002\054\004\000\002\054" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\056\015\000\002\056\014\000\002\057\004\000" +
    "\002\057\003\000\002\060\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\012\004\ufffc\040\011\053\005\054\015\001" +
    "\002\000\012\004\ufffc\040\011\053\005\054\015\001\002" +
    "\000\004\040\u010f\001\002\000\004\044\373\001\002\000" +
    "\012\004\ufffc\040\011\053\005\054\015\001\002\000\010" +
    "\036\323\037\326\044\325\001\002\000\004\044\uffc4\001" +
    "\002\000\012\004\ufffc\040\011\053\005\054\015\001\002" +
    "\000\004\004\066\001\002\000\004\002\064\001\002\000" +
    "\004\040\063\001\002\000\010\036\017\037\022\044\021" +
    "\001\002\000\004\040\060\001\002\000\006\036\054\037" +
    "\055\001\002\000\014\005\032\006\030\040\026\042\027" +
    "\065\031\001\002\000\012\004\uffe0\040\uffe0\053\uffe0\054" +
    "\uffe0\001\002\000\012\004\uffe5\040\uffe5\053\uffe5\054\uffe5" +
    "\001\002\000\016\036\uffdd\037\uffdd\045\046\046\043\047" +
    "\047\050\045\001\002\000\020\036\uffd6\037\uffd6\043\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\001\002\000\020\036" +
    "\uffd5\037\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\001\002\000\014\005\032\006\030\040\026\042\027\065" +
    "\031\001\002\000\020\036\uffd7\037\uffd7\043\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\001\002\000\004\051\033\001" +
    "\002\000\020\036\uffd8\037\uffd8\043\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\001\002\000\006\005\036\040\035\001" +
    "\002\000\004\052\037\001\002\000\004\052\uffc6\001\002" +
    "\000\004\052\uffc7\001\002\000\004\027\040\001\002\000" +
    "\004\070\041\001\002\000\020\036\uffc8\037\uffc8\043\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000\014\043" +
    "\044\045\046\046\043\047\047\050\045\001\002\000\014" +
    "\005\032\006\030\040\026\042\027\065\031\001\002\000" +
    "\020\036\uffd4\037\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\001\002\000\014\005\032\006\030\040\026\042" +
    "\027\065\031\001\002\000\014\005\032\006\030\040\026" +
    "\042\027\065\031\001\002\000\014\005\032\006\030\040" +
    "\026\042\027\065\031\001\002\000\020\036\uffda\037\uffda" +
    "\043\uffda\045\uffda\046\uffda\047\uffda\050\uffda\001\002\000" +
    "\020\036\uffdb\037\uffdb\043\uffdb\045\uffdb\046\uffdb\047\047" +
    "\050\045\001\002\000\020\036\uffd9\037\uffd9\043\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002\000\020\036\uffdc" +
    "\037\uffdc\043\uffdc\045\uffdc\046\uffdc\047\047\050\045\001" +
    "\002\000\004\040\060\001\002\000\012\004\uffe3\040\uffe3" +
    "\053\uffe3\054\uffe3\001\002\000\010\036\017\037\022\044" +
    "\021\001\002\000\012\004\uffe2\040\uffe2\053\uffe2\054\uffe2" +
    "\001\002\000\010\036\uffde\037\uffde\044\uffde\001\002\000" +
    "\012\004\uffdf\040\uffdf\053\uffdf\054\uffdf\001\002\000\012" +
    "\004\uffe1\040\uffe1\053\uffe1\054\uffe1\001\002\000\010\036" +
    "\ufffa\037\ufffa\044\ufffa\001\002\000\004\002\001\001\002" +
    "\000\004\002\000\001\002\000\074\005\074\006\114\007" +
    "\112\010\107\012\067\014\070\024\132\025\072\027\124" +
    "\030\071\031\105\032\123\033\120\036\115\037\102\040" +
    "\122\041\126\042\106\043\104\044\110\045\117\046\134" +
    "\047\073\050\133\051\100\052\077\053\076\054\131\056" +
    "\116\001\002\000\062\005\074\006\114\013\uffab\027\124" +
    "\030\071\031\105\032\123\033\120\036\115\037\102\040" +
    "\122\041\126\042\106\043\104\044\110\045\117\046\134" +
    "\047\073\050\133\051\100\052\077\053\076\054\131\056" +
    "\116\001\002\000\074\005\074\006\114\010\107\012\067" +
    "\015\234\016\236\024\132\025\233\027\124\030\071\031" +
    "\105\032\123\033\120\036\115\037\102\040\122\041\126" +
    "\042\106\043\104\044\110\045\117\046\134\047\073\050" +
    "\133\051\100\052\077\053\076\054\131\056\116\001\002" +
    "\000\120\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\033\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98" +
    "\056\uff98\001\002\000\004\071\214\001\002\000\120\005" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\056\uff9f\001" +
    "\002\000\120\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\056\uffa8\001\002\000\110\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\012\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\022\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\033\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\056\uff8c\001" +
    "\002\000\120\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\056\uff9b\001\002\000\120\005\uff9c\006\uff9c\007\uff9c" +
    "\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\056\uff9c\001\002\000\120\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\056\uff9d\001\002" +
    "\000\074\005\uff6e\006\uff6e\007\uff6e\010\uff6e\012\uff6e\014" +
    "\uff6e\024\uff6e\025\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e" +
    "\033\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\052\uff6e\053\uff6e\054\uff6e\056\uff6e\001\002\000\120\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\056\uffa5\001" +
    "\002\000\074\005\uff6d\006\uff6d\007\uff6d\010\uff6d\012\uff6d" +
    "\014\uff6d\024\uff6d\025\uff6d\027\uff6d\030\uff6d\031\uff6d\032" +
    "\uff6d\033\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d" +
    "\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051" +
    "\uff6d\052\uff6d\053\uff6d\054\uff6d\056\uff6d\001\002\000\120" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\056\uffa3" +
    "\001\002\000\120\005\uff97\006\uff97\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97" +
    "\054\uff97\056\uff97\001\002\000\120\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\056\uffa4\001\002\000\062\005" +
    "\074\006\114\011\uffab\027\124\030\071\031\105\032\123" +
    "\033\120\036\115\037\102\040\122\041\126\042\106\043" +
    "\104\044\110\045\117\046\134\047\073\050\133\051\100" +
    "\052\077\053\076\054\131\056\116\001\002\000\120\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\056\uffa2\001" +
    "\002\000\110\005\uff8b\006\uff8b\007\uff8b\010\uff8b\012\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\022\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043" +
    "\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b" +
    "\052\uff8b\053\uff8b\054\uff8b\056\uff8b\001\002\000\004\002" +
    "\uff72\001\002\000\004\007\205\001\002\000\120\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\056\uffa7\001\002" +
    "\000\120\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\056\uffa6\001\002\000\120\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\056\uffa9\001\002\000\120\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\056\uffa1\001\002\000" +
    "\120\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\033\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\056" +
    "\uff95\001\002\000\074\005\uff6f\006\uff6f\007\uff6f\010\uff6f" +
    "\012\uff6f\014\uff6f\024\uff6f\025\uff6f\027\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\033\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f" +
    "\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050" +
    "\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\056\uff6f\001\002" +
    "\000\120\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\056\uffaa\001\002\000\120\005\uff96\006\uff96\007\uff96\010" +
    "\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\056\uff96\001\002\000\120\005\uff99\006" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99" +
    "\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\056\uff99\001\002\000" +
    "\110\005\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\014\uff8e" +
    "\015\uff8e\016\uff8e\017\uff8e\020\uff8e\022\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\054\uff8e\056\uff8e\001\002\000\004\042\136\001" +
    "\002\000\110\005\uff8f\006\uff8f\007\uff8f\010\uff8f\012\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\022\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\056\uff8f\001\002\000\074\005" +
    "\074\006\114\007\uff70\010\107\012\067\014\070\024\132" +
    "\025\072\027\124\030\071\031\105\032\123\033\120\036" +
    "\115\037\102\040\122\041\126\042\106\043\104\044\110" +
    "\045\117\046\134\047\073\050\133\051\100\052\077\053" +
    "\076\054\131\056\116\001\002\000\120\005\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\056\uff9a\001\002\000\110" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\012\uff8d\014\uff8d\015" +
    "\uff8d\016\uff8d\017\uff8d\020\uff8d\022\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d" +
    "\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053" +
    "\uff8d\054\uff8d\056\uff8d\001\002\000\120\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\056\uff9e\001\002\000\120" +
    "\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\056\uffa0" +
    "\001\002\000\004\007\uff71\001\002\000\006\040\137\057" +
    "\141\001\002\000\004\043\203\001\002\000\004\043\201" +
    "\001\002\000\004\027\142\001\002\000\014\055\147\060" +
    "\146\061\145\065\151\066\150\001\002\000\020\036\uffca" +
    "\037\uffca\043\uffca\045\uffca\046\uffca\047\uffca\050\uffca\001" +
    "\002\000\020\036\uffc9\037\uffc9\043\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\001\002\000\004\051\174\001\002\000" +
    "\004\051\165\001\002\000\020\036\uffd2\037\uffd2\043\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\001\002\000\004\051" +
    "\160\001\002\000\004\051\152\001\002\000\006\005\036" +
    "\040\035\001\002\000\004\052\154\001\002\000\004\027" +
    "\155\001\002\000\010\062\156\063\157\070\041\001\002" +
    "\000\020\036\uffcd\037\uffcd\043\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\001\002\000\020\036\uffcc\037\uffcc\043\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002\000\006\005" +
    "\036\040\035\001\002\000\004\052\162\001\002\000\004" +
    "\027\163\001\002\000\004\067\164\001\002\000\020\036" +
    "\uffcb\037\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\001\002\000\006\005\036\040\035\001\002\000\004\052" +
    "\167\001\002\000\004\027\170\001\002\000\010\062\172" +
    "\063\173\064\171\001\002\000\020\036\uffce\037\uffce\043" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\001\002\000\020" +
    "\036\uffd0\037\uffd0\043\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\001\002\000\020\036\uffcf\037\uffcf\043\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\001\002\000\006\005\036\040" +
    "\035\001\002\000\004\052\176\001\002\000\004\027\177" +
    "\001\002\000\004\062\200\001\002\000\020\036\uffd1\037" +
    "\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\001\002" +
    "\000\004\041\202\001\002\000\120\005\uff93\006\uff93\007" +
    "\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93" +
    "\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\053\uff93\054\uff93\056\uff93\001\002\000\004\041" +
    "\204\001\002\000\120\005\uff94\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053" +
    "\uff94\054\uff94\056\uff94\001\002\000\004\002\uff73\001\002" +
    "\000\064\005\074\006\114\011\uffab\013\uffab\027\124\030" +
    "\071\031\105\032\123\033\120\036\115\037\102\040\122" +
    "\041\126\042\106\043\104\044\110\045\117\046\134\047" +
    "\073\050\133\051\100\052\077\053\076\054\131\056\116" +
    "\001\002\000\004\011\212\001\002\000\064\005\074\006" +
    "\114\011\uffab\013\uffab\027\124\030\071\031\105\032\123" +
    "\033\120\036\115\037\102\040\122\041\126\042\106\043" +
    "\104\044\110\045\117\046\134\047\073\050\133\051\100" +
    "\052\077\053\076\054\131\056\116\001\002\000\006\011" +
    "\uffad\013\uffad\001\002\000\114\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\056\uffb8\001\002\000\006\011\uffac\013\uffac\001\002" +
    "\000\004\030\215\001\002\000\004\040\216\001\002\000" +
    "\004\031\217\001\002\000\004\030\220\001\002\000\004" +
    "\040\221\001\002\000\004\037\222\001\002\000\004\032" +
    "\223\001\002\000\072\005\074\006\114\010\107\012\067" +
    "\014\070\024\132\026\225\027\124\030\071\031\105\032" +
    "\123\033\120\036\115\037\102\040\122\041\126\042\106" +
    "\043\104\044\110\045\117\046\134\047\073\050\133\051" +
    "\100\052\077\053\076\054\131\056\116\001\002\000\072" +
    "\005\074\006\114\010\107\012\067\014\070\024\132\026" +
    "\uff69\027\124\030\071\031\105\032\123\033\120\036\115" +
    "\037\102\040\122\041\126\042\106\043\104\044\110\045" +
    "\117\046\134\047\073\050\133\051\100\052\077\053\076" +
    "\054\131\056\116\001\002\000\074\005\uff6b\006\uff6b\007" +
    "\uff6b\010\uff6b\012\uff6b\014\uff6b\024\uff6b\025\uff6b\027\uff6b" +
    "\030\uff6b\031\uff6b\032\uff6b\033\uff6b\036\uff6b\037\uff6b\040" +
    "\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b" +
    "\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\056" +
    "\uff6b\001\002\000\072\005\uff67\006\uff67\010\uff67\012\uff67" +
    "\014\uff67\024\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032" +
    "\uff67\033\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67" +
    "\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051" +
    "\uff67\052\uff67\053\uff67\054\uff67\056\uff67\001\002\000\004" +
    "\026\231\001\002\000\072\005\uff68\006\uff68\010\uff68\012" +
    "\uff68\014\uff68\024\uff68\026\uff68\027\uff68\030\uff68\031\uff68" +
    "\032\uff68\033\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042" +
    "\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68" +
    "\051\uff68\052\uff68\053\uff68\054\uff68\056\uff68\001\002\000" +
    "\074\005\uff6c\006\uff6c\007\uff6c\010\uff6c\012\uff6c\014\uff6c" +
    "\024\uff6c\025\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c" +
    "\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052" +
    "\uff6c\053\uff6c\054\uff6c\056\uff6c\001\002\000\004\026\uff6a" +
    "\001\002\000\004\071\301\001\002\000\076\005\uff7a\006" +
    "\uff7a\007\uff7a\010\uff7a\012\uff7a\014\uff7a\024\uff7a\025\uff7a" +
    "\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\036" +
    "\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053" +
    "\uff7a\054\uff7a\056\uff7a\001\002\000\074\005\074\006\114" +
    "\010\107\012\067\015\uff77\016\236\024\132\025\233\027" +
    "\124\030\071\031\105\032\123\033\120\036\115\037\102" +
    "\040\122\041\126\042\106\043\104\044\110\045\117\046" +
    "\134\047\073\050\133\051\100\052\077\053\076\054\131" +
    "\056\116\001\002\000\074\005\074\006\114\010\107\012" +
    "\067\017\252\020\245\022\250\024\132\027\124\030\071" +
    "\031\105\032\123\033\120\036\115\037\102\040\122\041" +
    "\126\042\106\043\104\044\110\045\117\046\134\047\073" +
    "\050\133\051\100\052\077\053\076\054\131\056\116\001" +
    "\002\000\074\005\074\006\114\010\107\012\067\015\uff76" +
    "\016\236\024\132\025\233\027\124\030\071\031\105\032" +
    "\123\033\120\036\115\037\102\040\122\041\126\042\106" +
    "\043\104\044\110\045\117\046\134\047\073\050\133\051" +
    "\100\052\077\053\076\054\131\056\116\001\002\000\074" +
    "\005\074\006\114\010\107\012\067\015\uff75\016\236\024" +
    "\132\025\233\027\124\030\071\031\105\032\123\033\120" +
    "\036\115\037\102\040\122\041\126\042\106\043\104\044" +
    "\110\045\117\046\134\047\073\050\133\051\100\052\077" +
    "\053\076\054\131\056\116\001\002\000\004\015\242\001" +
    "\002\000\076\005\uff7b\006\uff7b\007\uff7b\010\uff7b\012\uff7b" +
    "\014\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031" +
    "\uff7b\032\uff7b\033\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b" +
    "\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\056\uff7b\001\002" +
    "\000\004\015\uff74\001\002\000\004\015\uff78\001\002\000" +
    "\070\005\074\006\114\010\107\012\067\021\276\024\264" +
    "\027\124\030\071\031\105\032\123\033\120\036\115\037" +
    "\102\040\122\041\126\042\106\043\104\044\110\045\117" +
    "\046\134\047\073\050\133\051\100\052\077\053\076\054" +
    "\131\056\116\001\002\000\074\005\074\006\114\010\107" +
    "\012\067\017\uff82\020\245\022\250\024\132\027\124\030" +
    "\071\031\105\032\123\033\120\036\115\037\102\040\122" +
    "\041\126\042\106\043\104\044\110\045\117\046\134\047" +
    "\073\050\133\051\100\052\077\053\076\054\131\056\116" +
    "\001\002\000\074\005\074\006\114\010\107\012\067\017" +
    "\uff81\020\245\022\250\024\132\027\124\030\071\031\105" +
    "\032\123\033\120\036\115\037\102\040\122\041\126\042" +
    "\106\043\104\044\110\045\117\046\134\047\073\050\133" +
    "\051\100\052\077\053\076\054\131\056\116\001\002\000" +
    "\070\005\074\006\114\010\107\012\067\023\263\024\264" +
    "\027\124\030\071\031\105\032\123\033\120\036\115\037" +
    "\102\040\122\041\126\042\106\043\104\044\110\045\117" +
    "\046\134\047\073\050\133\051\100\052\077\053\076\054" +
    "\131\056\116\001\002\000\074\005\074\006\114\010\107" +
    "\012\067\017\uff7f\020\245\022\250\024\132\027\124\030" +
    "\071\031\105\032\123\033\120\036\115\037\102\040\122" +
    "\041\126\042\106\043\104\044\110\045\117\046\134\047" +
    "\073\050\133\051\100\052\077\053\076\054\131\056\116" +
    "\001\002\000\076\005\uff85\006\uff85\010\uff85\012\uff85\015" +
    "\uff85\016\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\036\uff85\037\uff85\040\uff85\041" +
    "\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\056\uff85\001" +
    "\002\000\004\017\254\001\002\000\076\005\uff86\006\uff86" +
    "\010\uff86\012\uff86\015\uff86\016\uff86\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\056\uff86\001\002\000\004\017\uff80\001\002\000" +
    "\072\005\074\006\114\010\107\012\067\021\uffae\023\uffae" +
    "\024\264\027\124\030\071\031\105\032\123\033\120\036" +
    "\115\037\102\040\122\041\126\042\106\043\104\044\110" +
    "\045\117\046\134\047\073\050\133\051\100\052\077\053" +
    "\076\054\131\056\116\001\002\000\004\023\271\001\002" +
    "\000\072\005\074\006\114\010\107\012\067\021\uffb3\023" +
    "\uffb3\024\264\027\124\030\071\031\105\032\123\033\120" +
    "\036\115\037\102\040\122\041\126\042\106\043\104\044" +
    "\110\045\117\046\134\047\073\050\133\051\100\052\077" +
    "\053\076\054\131\056\116\001\002\000\072\005\074\006" +
    "\114\010\107\012\067\021\uffb4\023\uffb4\024\264\027\124" +
    "\030\071\031\105\032\123\033\120\036\115\037\102\040" +
    "\122\041\126\042\106\043\104\044\110\045\117\046\134" +
    "\047\073\050\133\051\100\052\077\053\076\054\131\056" +
    "\116\001\002\000\072\005\074\006\114\010\107\012\067" +
    "\021\uffb0\023\uffb0\024\264\027\124\030\071\031\105\032" +
    "\123\033\120\036\115\037\102\040\122\041\126\042\106" +
    "\043\104\044\110\045\117\046\134\047\073\050\133\051" +
    "\100\052\077\053\076\054\131\056\116\001\002\000\074" +
    "\005\uff87\006\uff87\010\uff87\012\uff87\017\uff87\020\uff87\022" +
    "\uff87\024\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\056\uff87\001\002\000\072\005\074\006" +
    "\114\010\107\012\067\021\uffb2\023\uffb2\024\264\027\124" +
    "\030\071\031\105\032\123\033\120\036\115\037\102\040" +
    "\122\041\126\042\106\043\104\044\110\045\117\046\134" +
    "\047\073\050\133\051\100\052\077\053\076\054\131\056" +
    "\116\001\002\000\006\021\uffb5\023\uffb5\001\002\000\006" +
    "\021\uffb1\023\uffb1\001\002\000\006\021\uffb7\023\uffb7\001" +
    "\002\000\006\021\uffb6\023\uffb6\001\002\000\074\005\uff88" +
    "\006\uff88\010\uff88\012\uff88\017\uff88\020\uff88\022\uff88\024" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\036\uff88" +
    "\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88" +
    "\054\uff88\056\uff88\001\002\000\006\021\uffaf\023\uffaf\001" +
    "\002\000\004\017\uff83\001\002\000\004\017\uff84\001\002" +
    "\000\004\021\277\001\002\000\074\005\uff90\006\uff90\010" +
    "\uff90\012\uff90\017\uff90\020\uff90\022\uff90\024\uff90\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\056" +
    "\uff90\001\002\000\074\005\uff91\006\uff91\010\uff91\012\uff91" +
    "\017\uff91\020\uff91\022\uff91\024\uff91\027\uff91\030\uff91\031" +
    "\uff91\032\uff91\033\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\056\uff91\001\002" +
    "\000\004\015\uff79\001\002\000\004\030\302\001\002\000" +
    "\004\040\303\001\002\000\004\031\304\001\002\000\004" +
    "\030\305\001\002\000\004\040\306\001\002\000\004\037" +
    "\307\001\002\000\004\032\310\001\002\000\072\005\074" +
    "\006\114\010\107\012\067\016\236\024\132\026\314\027" +
    "\124\030\071\031\105\032\123\033\120\036\115\037\102" +
    "\040\122\041\126\042\106\043\104\044\110\045\117\046" +
    "\134\047\073\050\133\051\100\052\077\053\076\054\131" +
    "\056\116\001\002\000\004\026\317\001\002\000\004\026" +
    "\316\001\002\000\070\005\074\006\114\010\107\012\067" +
    "\024\132\026\uff89\027\124\030\071\031\105\032\123\033" +
    "\120\036\115\037\102\040\122\041\126\042\106\043\104" +
    "\044\110\045\117\046\134\047\073\050\133\051\100\052" +
    "\077\053\076\054\131\056\116\001\002\000\074\005\uff7c" +
    "\006\uff7c\010\uff7c\012\uff7c\015\uff7c\016\uff7c\024\uff7c\025" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\036\uff7c" +
    "\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045" +
    "\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c" +
    "\054\uff7c\056\uff7c\001\002\000\004\026\uff8a\001\002\000" +
    "\074\005\uff7d\006\uff7d\010\uff7d\012\uff7d\015\uff7d\016\uff7d" +
    "\024\uff7d\025\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033" +
    "\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052" +
    "\uff7d\053\uff7d\054\uff7d\056\uff7d\001\002\000\074\005\uff7e" +
    "\006\uff7e\010\uff7e\012\uff7e\015\uff7e\016\uff7e\024\uff7e\025" +
    "\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\036\uff7e" +
    "\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\054\uff7e\056\uff7e\001\002\000\004\013\321\001\002\000" +
    "\114\005\uff92\006\uff92\007\uff92\010\uff92\012\uff92\014\uff92" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042" +
    "\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\051\uff92\052\uff92\053\uff92\054\uff92\056\uff92\001\002\000" +
    "\004\004\ufffe\001\002\000\006\003\332\040\334\001\002" +
    "\000\012\004\ufffb\040\ufffb\053\ufffb\054\ufffb\001\002\000" +
    "\010\040\342\056\344\057\343\001\002\000\012\004\ufff3" +
    "\040\ufff3\053\ufff3\054\ufff3\001\002\000\006\036\330\037" +
    "\331\001\002\000\006\003\332\040\334\001\002\000\012" +
    "\004\ufff6\040\ufff6\053\ufff6\054\ufff6\001\002\000\004\037" +
    "\337\001\002\000\012\004\ufff5\040\ufff5\053\ufff5\054\ufff5" +
    "\001\002\000\010\036\ufff7\037\ufff7\044\ufff7\001\002\000" +
    "\010\036\323\037\326\044\325\001\002\000\012\004\ufff9" +
    "\040\ufff9\053\ufff9\054\ufff9\001\002\000\012\004\ufff8\040" +
    "\ufff8\053\ufff8\054\ufff8\001\002\000\010\036\uffee\037\uffee" +
    "\046\367\001\002\000\006\036\ufff2\037\ufff2\001\002\000" +
    "\010\036\uffed\037\uffed\046\365\001\002\000\004\027\356" +
    "\001\002\000\010\036\ufff0\037\ufff0\046\345\001\002\000" +
    "\014\005\352\006\350\040\346\056\353\057\141\001\002" +
    "\000\010\036\uffe6\037\uffe6\046\uffe6\001\002\000\010\036" +
    "\ufff1\037\ufff1\046\354\001\002\000\010\036\uffe9\037\uffe9" +
    "\046\uffe9\001\002\000\010\036\uffe8\037\uffe8\046\uffe8\001" +
    "\002\000\010\036\uffea\037\uffea\046\uffea\001\002\000\010" +
    "\036\uffe7\037\uffe7\046\uffe7\001\002\000\014\005\352\006" +
    "\350\040\346\056\353\057\141\001\002\000\010\036\uffeb" +
    "\037\uffeb\046\uffeb\001\002\000\014\055\147\060\146\061" +
    "\145\065\360\066\150\001\002\000\010\036\uffd3\037\uffd3" +
    "\046\uffd3\001\002\000\004\051\361\001\002\000\006\005" +
    "\036\040\035\001\002\000\004\052\363\001\002\000\004" +
    "\027\364\001\002\000\006\062\156\063\157\001\002\000" +
    "\014\005\352\006\350\040\346\056\353\057\141\001\002" +
    "\000\010\036\uffec\037\uffec\046\354\001\002\000\014\005" +
    "\352\006\350\040\346\056\353\057\141\001\002\000\010" +
    "\036\uffef\037\uffef\046\354\001\002\000\012\004\ufff4\040" +
    "\ufff4\053\ufff4\054\ufff4\001\002\000\004\004\uffff\001\002" +
    "\000\016\005\u0101\006\376\040\u0100\042\u0102\056\374\057" +
    "\141\001\002\000\014\037\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\001\002\000\014\037\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\001\002\000\014\037\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\001\002\000\014\037\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\001\002\000\014\037\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\001\002\000\014\037\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\001\002\000\014\005\032" +
    "\006\030\040\026\042\027\065\031\001\002\000\014\037" +
    "\u0108\045\u0105\046\u0104\047\u0107\050\u0106\001\002\000\016" +
    "\005\u0101\006\376\040\u0100\042\u0102\056\374\057\141\001" +
    "\002\000\016\005\u0101\006\376\040\u0100\042\u0102\056\374" +
    "\057\141\001\002\000\016\005\u0101\006\376\040\u0100\042" +
    "\u0102\056\374\057\141\001\002\000\016\005\u0101\006\376" +
    "\040\u0100\042\u0102\056\374\057\141\001\002\000\012\004" +
    "\uffc5\040\uffc5\053\uffc5\054\uffc5\001\002\000\014\037\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000\014\037" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002\000\014" +
    "\037\uffc2\045\uffc2\046\uffc2\047\u0107\050\u0106\001\002\000" +
    "\014\037\uffc3\045\uffc3\046\uffc3\047\u0107\050\u0106\001\002" +
    "\000\014\043\u010e\045\046\046\043\047\047\050\045\001" +
    "\002\000\014\037\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\001\002\000\010\036\uffe4\037\uffe4\044\uffe4\001\002\000" +
    "\004\004\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\022\002\012\003\006\004\011\005\007\011" +
    "\005\013\015\017\013\020\003\001\001\000\020\002\u010f" +
    "\003\006\004\011\005\007\011\005\013\015\020\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\371" +
    "\003\006\004\011\005\007\011\005\013\015\020\003\001" +
    "\001\000\006\007\323\010\326\001\001\000\002\001\001" +
    "\000\020\002\321\003\006\004\011\005\007\011\005\013" +
    "\015\020\003\001\001\000\004\053\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\022\016\017\001" +
    "\001\000\006\015\061\022\055\001\001\000\002\001\001" +
    "\000\006\034\024\035\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\024\035\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\024\035\052\001\001\000" +
    "\002\001\001\000\006\034\024\035\051\001\001\000\006" +
    "\034\024\035\050\001\001\000\006\034\024\035\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\056\022\055\001\001\000" +
    "\002\001\001\000\006\014\060\016\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\036\126\040\074\041\110\042\124\044\120\051" +
    "\100\054\112\055\127\056\102\001\001\000\010\037\317" +
    "\040\207\041\205\001\001\000\022\036\126\040\074\041" +
    "\110\042\124\044\236\046\234\050\237\052\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\206\040\207\041\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\036\126\040\074\041\110\042\124\044\120\051" +
    "\100\054\134\055\127\056\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\142\034" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\212\040" +
    "\207\041\205\001\001\000\002\001\001\000\010\037\210" +
    "\040\207\041\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\036\126\040\074" +
    "\041\110\042\124\044\227\051\225\057\226\060\223\001" +
    "\001\000\022\036\126\040\074\041\110\042\124\044\227" +
    "\051\225\057\231\060\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\036\126\040\074\041\110\042\124\044\236" +
    "\046\234\050\237\052\277\001\001\000\022\036\126\040" +
    "\074\041\110\042\124\043\246\044\250\045\245\047\252" +
    "\001\001\000\022\036\126\040\074\041\110\042\124\044" +
    "\236\046\234\050\237\052\243\001\001\000\022\036\126" +
    "\040\074\041\110\042\124\044\236\046\234\050\237\052" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\274\036\260\040" +
    "\261\041\255\042\257\001\001\000\022\036\126\040\074" +
    "\041\110\042\124\043\246\044\250\045\245\047\273\001" +
    "\001\000\022\036\126\040\074\041\110\042\124\043\246" +
    "\044\250\045\245\047\272\001\001\000\014\012\256\036" +
    "\260\040\261\041\255\042\257\001\001\000\022\036\126" +
    "\040\074\041\110\042\124\043\246\044\250\045\245\047" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\271\036\260\040" +
    "\261\041\255\042\257\001\001\000\002\001\001\000\014" +
    "\012\267\036\260\040\261\041\255\042\257\001\001\000" +
    "\014\012\266\036\260\040\261\041\255\042\257\001\001" +
    "\000\014\012\265\036\260\040\261\041\255\042\257\001" +
    "\001\000\002\001\001\000\014\012\264\036\260\040\261" +
    "\041\255\042\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\311\036\126\040\074\041" +
    "\110\042\124\044\312\046\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\024\314\036\126\040\074\041" +
    "\110\042\124\044\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\370" +
    "\021\334\001\001\000\002\001\001\000\006\025\340\027" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\332\021\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\335" +
    "\010\326\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\346\031\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\354\031\350\001\001\000\002\001\001\000\004" +
    "\030\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\365\031\350\001\001\000" +
    "\002\001\001\000\006\026\367\031\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\376\031\374\032\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\024\035\u010c\001\001" +
    "\000\002\001\001\000\010\023\376\031\374\032\u010b\001" +
    "\001\000\010\023\376\031\374\032\u010a\001\001\000\010" +
    "\023\376\031\374\032\u0109\001\001\000\010\023\376\031" +
    "\374\032\u0108\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
/*declaracion de variables para capturar Strigns para la tabla de simbolos*/

 /* Connect this parser to a scanner!*/
        private TableSimbol VarGlobal = new TableSimbol();
        private TableSimbolHtml tabla = new TableSimbolHtml();
        private boolean isString=false;
        String operatiosss = "";
        
	public Parserhtml(LexerHtml analizadorLexico) {
		super(analizadorLexico);
	}

        @Override
        public void syntax_error(Symbol tok) {
	    try{
	        Token token = (Token) tok.value;
	        report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
	    }catch(Exception e){
                e.printStackTrace();
	    }	
	}


    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             System.out.println("SE ESPERABA UNA LLAVE FINAL");  
        }else{
             Token token = (Token) cur_token.value;
	     report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
        }
    }


   public void setTablaHtml(TableSimbolHtml tabla){
        this.tabla = tabla;
    }
    public TableSimbolHtml getTableHtml(){
        return this.tabla;
    }

    public void setTabla(TableSimbol tabla){
        this.VarGlobal = tabla;
    }
    public TableSimbol getTable(){
        return this.VarGlobal;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final Parserhtml parser;

  /** Constructor */
  CUP$parser$actions(Parserhtml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= def_variable def_html_General 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // def_variable ::= variable_integer def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // def_variable ::= variable_String def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def_variable ::= var_Asign def_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_variable ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variable_String ::= strin items 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_String",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // strin ::= STRING IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tabla.capturarVarible("String",identificador.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strin",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // items_coma ::= iddItemsComodin items 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // items_coma ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // iddItemsComodin ::= IDD 
            {
              Object RESULT =null;
		int nomVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nomVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nomVar = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tabla.capturarVarible("String",nomVar.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddItemsComodin",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // items ::= asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // items ::= asignacion COMA items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= IGUAL operationString 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tabla.capturarContenido(contenido); System.out.println(contenido);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operationString ::= CADENA MAS concatenacion 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token cadena = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cadena.getLexeme()+contenido;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operationString ::= CADENA 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operationString ::= subTerminalTabla MAS concatenacion 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int contenido1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenido1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido + contenido1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operationString ::= subTerminalTabla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operationString ::= IDD 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(identificador,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operationString ::= IDD MAS concatenacion 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(identificador , true)+contenido;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // concatenacion ::= concatenacion MAS concatenacion 
            {
              String RESULT =null;
		int contenido1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contenido1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String contenido1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int contenido2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenido2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido1 +contenido2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // concatenacion ::= ENTERO 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // concatenacion ::= DECIMAL 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // concatenacion ::= terminalTabla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // concatenacion ::= CADENA 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // concatenacion ::= IDD 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(identificador,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_integer ::= inte items_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_integer",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inte ::= INTEGER IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tabla.capturarVarible("Integer",identificador.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inte",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // items_int ::= asignacionInt PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // items_int ::= asignacionInt COMA items_coma_B 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // items_int ::= COMA items_coma_B 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // items_int ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // items_coma_B ::= iddComodinInt items_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items_coma_B",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iddComodinInt ::= IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tabla.capturarVarible("Integer",identificador.getLexeme());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddComodinInt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacionInt ::= IGUAL operation 
            {
              Object RESULT =null;
		int valOperationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valOperationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valOperation = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{tabla.capturarContenido(String.valueOf(valOperation)); System.out.println(String.valueOf(valOperation));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionInt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= operation MAS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = numero2+numero1;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= operation MENOS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = numero1-numero2;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= operation POR operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = numero2*numero1;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= operation DIVISION operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = numero1/numero2;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= ENTERO 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = Integer.valueOf( num.getLexeme());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= DECIMAL 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = (int)Double.parseDouble( num.getLexeme());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= parametros 
            {
              Integer RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer numero = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= numero;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= IDD 
            {
              Integer RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.contenidNumeroVariable(identificador);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= PARENTESISA operation PARENTESISC 
            {
              Integer RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		try{RESULT = operacion;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // subTerminalTabla ::= RESULT PUNTO def_var_Globla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subTerminalTabla",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // def_var_Globla ::= SCORE 
            {
              String RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token score = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+VarGlobal.getScore();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // def_var_Globla ::= CLASES CORCHETEA index CORCHETEC PUNTO NOMBRE 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = VarGlobal.recuperarNombreClass(indice, pos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // def_var_Globla ::= VARIABLES CORCHETEA index CORCHETEC PUNTO NOMBRE 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = VarGlobal.recuperacionNomVar(indice,pos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // def_var_Globla ::= VARIABLES CORCHETEA index CORCHETEC PUNTO TIPO 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = VarGlobal.recuperacionTipoVar(indice,pos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // def_var_Globla ::= VARIABLES CORCHETEA index CORCHETEC PUNTO FUNCION 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = VarGlobal.recupearacionFuncionPadreVAr(indice, pos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // def_var_Globla ::= METODOS CORCHETEA index CORCHETEC PUNTO NOMBRE 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = VarGlobal.recuperacionNombreMetodo(indice, pos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // def_var_Globla ::= METODOS CORCHETEA index CORCHETEC PUNTO TIPO 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = VarGlobal.recuperacionTipoMetodo(indice,pos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // def_var_Globla ::= COMENTARIOS CORCHETEA index CORCHETEC PUNTO TEXTO 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = VarGlobal.recuperarTextoComentario(indice, pos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // terminalTabla ::= RESULT PUNTO def_var_Globla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalTabla",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // terminalTabla ::= RESULT PUNTO parametros 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer contenido = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ""+ contenido;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminalTabla",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros ::= METODOS CORCHETEA index CORCHETEC PUNTO PARAMTETROS 
            {
              Integer RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = VarGlobal.recuperarParametrosMetodos(indice, pos);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // index ::= ENTERO 
            {
              Integer RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = Integer.valueOf( numero.getLexeme());}catch(Exception e){RESULT =0;e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // index ::= IDD 
            {
              Integer RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.contenidNumeroVariable(numero);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_Asign ::= iddVarComodin IGUAL operationAsig PUNTOCOMA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		tabla.capturarConteniYadeclarad(contenido, isString); System.out.println(contenido);tabla.setReporError(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_Asign",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // iddVarComodin ::= IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		isString=tabla.tipoAsignacion(identificador);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iddVarComodin",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operationAsig ::= operationAsig MAS operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.accionSuma(isString, numero1,numero2,operador);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operationAsig ::= operationAsig MENOS operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.accionResta(isString, numero1,numero2,operador);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operationAsig ::= operationAsig POR operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.accionMultiplicar(isString, numero1,numero2,operador);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operationAsig ::= operationAsig DIVISION operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.accionDividir(isString, numero1,numero2,operador);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operationAsig ::= ENTERO 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operationAsig ::= DECIMAL 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operationAsig ::= terminalTabla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operationAsig ::= CADENA 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operationAsig ::= IDD 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(num,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operationAsig ::= operationaux 
            {
              String RESULT =null;
		try{RESULT = operatiosss;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operationaux ::= PARENTESISA operation PARENTESISC 
            {
              Object RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		operatiosss= ""+operacion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationaux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // title1 ::= H1ABRE itemHtml H1CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("title1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // titleRescursiver ::= title1 titleRescursiver 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // titleRescursiver ::= title2 titleRescursiver 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // titleRescursiver ::= SALTO titleRescursiver 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // titleRescursiver ::= title1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // titleRescursiver ::= title2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // titleRescursiver ::= SALTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // titleRescursiver ::= comodinIddHtml titleRescursiver 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // titleRescursiver ::= comodinIddHtml 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // titleRescursiver ::= usoVarGlobal titleRescursiver 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // titleRescursiver ::= usoVarGlobal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // itemHtml ::= comodinIddHtml itemHtml 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemHtml",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // itemHtml ::= usoVarGlobal itemHtml 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemHtml",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // itemHtml ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemHtml",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comodinIddHtml ::= IDD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comodinIddHtml ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comodinIddHtml ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comodinIddHtml ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comodinIddHtml ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comodinIddHtml ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comodinIddHtml ::= PARENTESISA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comodinIddHtml ::= PARENTESISC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comodinIddHtml ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comodinIddHtml ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comodinIddHtml ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comodinIddHtml ::= POR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // comodinIddHtml ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // comodinIddHtml ::= CORCHETEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // comodinIddHtml ::= CORCHETEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // comodinIddHtml ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // comodinIddHtml ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // comodinIddHtml ::= PUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // comodinIddHtml ::= DOSPUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // comodinIddHtml ::= HASTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // comodinIddHtml ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // comodinIddHtml ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // usoVarGlobal ::= COMODIN PARENTESISA IDD PARENTESISC COMODIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usoVarGlobal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // usoVarGlobal ::= COMODIN PARENTESISA terminalTabla PARENTESISC COMODIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usoVarGlobal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // title2 ::= H2ABRE itemHtml H2CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("title2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // columTitle ::= THABRE titleRescursiver THCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columTitle",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // columTitle ::= THABRE THCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columTitle",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comodinH1H2 ::= title1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comodinH1H2 ::= title2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comodinH1H2 ::= SALTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // comodinH1H2 ::= comodinIddHtml 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // comodinH1H2 ::= usoVarGlobal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // senteniasH1H2 ::= comodinH1H2 senteniasH1H2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("senteniasH1H2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // senteniasH1H2 ::= comodinH1H2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("senteniasH1H2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // columDatos ::= TDABRE titleRescursiver TDCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columDatos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // columDatos ::= TDABRE TDCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columDatos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // fila_columna ::= TRABRE validosTR TRCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila_columna",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // fila_columna ::= TRABRE TRCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila_columna",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // validosTR ::= columDatos validosTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("validosTR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // validosTR ::= columTitle validosTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("validosTR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // validosTR ::= columDatos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("validosTR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // validosTR ::= columTitle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("validosTR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // validosTR ::= comodinH1H2 validosTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("validosTR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // validosTR ::= comodinH1H2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("validosTR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // forAnidado ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR fila_columna FORCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forAnidado",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // forAnidado ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR senteniasH1H2 FORCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forAnidado",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // forAnidado ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR FORCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forAnidado",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // def_table ::= TABLAABRE comodinTable TABLACIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_table",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // def_table ::= TABLAABRE TABLACIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_table",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // comodinTable ::= fila_columna comodinTable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // comodinTable ::= comodinH1H2 comodinTable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // comodinTable ::= fila_columna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // comodinTable ::= comodinH1H2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // comodinTable ::= forAnidado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // comodinTable ::= forAnidado comodinTable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // def_html_General ::= HTMABRE sentencias HTMCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_html_General",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // def_html_General ::= HTMABRE HTMCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_html_General",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencia ::= comodinH1H2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentencia ::= def_table 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentencia ::= def_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // def_for ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR sentenciasFro FORCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_for",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // def_for ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR FORCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_for",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sentenciasFro ::= sentenciaFor sentenciasFro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFro",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentenciasFro ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasFro",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentenciaFor ::= comodinH1H2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentenciaFor ::= def_table 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
    }

}
