
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladores1.appcliente.analizadores;

import java_cup.runtime.*;
import com.compiladores1.appcliente.analizadores.*;
import com.compiladores1.appcliente.tableSimbol.*;
import com.compiladores1.appcliente.salidHtml.*;
import com.compiladores1.appcliente.erros.Errors;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parserhtml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parserhtml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parserhtml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parserhtml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\017\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\004\004\000\002\005\004\000\002\006\004\000" +
    "\002\006\004\000\002\021\003\000\002\007\004\000\002" +
    "\007\005\000\002\007\004\000\002\007\003\000\002\010" +
    "\004\000\002\024\005\000\002\024\003\000\002\024\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\005\000" +
    "\002\024\004\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\004\000\002\003\004\000\002\013\004" +
    "\000\002\014\004\000\002\014\005\000\002\014\004\000" +
    "\002\014\003\000\002\015\004\000\002\022\003\000\002" +
    "\016\004\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\005\000" +
    "\002\034\004\000\002\026\005\000\002\027\003\000\002" +
    "\027\010\000\002\027\010\000\002\027\010\000\002\027" +
    "\010\000\002\027\010\000\002\027\010\000\002\027\010" +
    "\000\002\027\003\000\002\030\005\000\002\030\005\000" +
    "\002\033\010\000\002\032\003\000\002\032\003\000\002" +
    "\020\006\000\002\011\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\004\000\002" +
    "\023\005\000\002\035\005\000\002\012\004\000\002\012" +
    "\003\000\002\012\003\000\002\036\004\000\002\036\004" +
    "\000\002\036\002\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\007\000\002\040\007\000\002\041\005" +
    "\000\002\042\005\000\002\042\004\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\044\005" +
    "\000\002\044\004\000\002\044\004\000\002\045\005\000" +
    "\002\045\004\000\002\045\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\003\000\002\046\003\000\002\046" +
    "\004\000\002\046\003\000\002\061\004\000\002\061\003" +
    "\000\002\061\004\000\002\047\015\000\002\047\014\000" +
    "\002\051\005\000\002\051\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\004\000\002\053\005\000\002\053\004" +
    "\000\002\053\004\000\002\054\004\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\056\015\000\002\056\014\000\002\057\004\000\002\057" +
    "\003\000\002\060\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\014\003\ufffc\004\ufffc\040\011\053\007\054" +
    "\015\001\002\000\014\003\ufffc\004\ufffc\040\011\053\007" +
    "\054\015\001\002\000\014\003\ufffc\004\ufffc\040\011\053" +
    "\007\054\015\001\002\000\004\044\u0106\001\002\000\004" +
    "\040\u0105\001\002\000\010\036\332\037\335\044\334\001" +
    "\002\000\004\044\uffc0\001\002\000\014\003\ufffc\004\ufffc" +
    "\040\011\053\007\054\015\001\002\000\006\003\067\004" +
    "\071\001\002\000\004\002\066\001\002\000\004\040\065" +
    "\001\002\000\010\036\017\037\023\044\021\001\002\000" +
    "\004\040\062\001\002\000\006\036\056\037\057\001\002" +
    "\000\016\003\026\005\033\006\032\040\027\042\030\065" +
    "\031\001\002\000\014\003\uffe3\004\uffe3\040\uffe3\053\uffe3" +
    "\054\uffe3\001\002\000\032\003\uffde\004\uffde\036\uffde\037" +
    "\uffde\040\uffde\043\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\053\uffde\054\uffde\001\002\000\016\036\uffdb\037\uffdb\045" +
    "\047\046\044\047\050\050\046\001\002\000\020\036\uffd4" +
    "\037\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\001" +
    "\002\000\010\036\017\037\023\044\021\001\002\000\020" +
    "\036\uffd3\037\uffd3\043\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\001\002\000\016\003\026\005\033\006\032\040\027" +
    "\042\030\065\031\001\002\000\004\051\034\001\002\000" +
    "\020\036\uffd5\037\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\001\002\000\020\036\uffd6\037\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\001\002\000\006\005\037" +
    "\040\036\001\002\000\004\052\040\001\002\000\004\052" +
    "\uffc2\001\002\000\004\052\uffc3\001\002\000\004\027\041" +
    "\001\002\000\004\070\042\001\002\000\020\036\uffc4\037" +
    "\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\001\002" +
    "\000\014\043\045\045\047\046\044\047\050\050\046\001" +
    "\002\000\016\003\026\005\033\006\032\040\027\042\030" +
    "\065\031\001\002\000\020\036\uffd2\037\uffd2\043\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\001\002\000\016\003\026" +
    "\005\033\006\032\040\027\042\030\065\031\001\002\000" +
    "\016\003\026\005\033\006\032\040\027\042\030\065\031" +
    "\001\002\000\016\003\026\005\033\006\032\040\027\042" +
    "\030\065\031\001\002\000\020\036\uffd8\037\uffd8\043\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\001\002\000\020\036" +
    "\uffd9\037\uffd9\043\uffd9\045\uffd9\046\uffd9\047\050\050\046" +
    "\001\002\000\020\036\uffd7\037\uffd7\043\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\001\002\000\020\036\uffda\037\uffda" +
    "\043\uffda\045\uffda\046\uffda\047\050\050\046\001\002\000" +
    "\020\036\uffd1\037\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\001\002\000\004\040\062\001\002\000\032\003" +
    "\uffe1\004\uffe1\036\uffe1\037\uffe1\040\uffe1\043\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\053\uffe1\054\uffe1\001\002\000" +
    "\010\036\017\037\023\044\021\001\002\000\032\003\uffe0" +
    "\004\uffe0\036\uffe0\037\uffe0\040\uffe0\043\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\053\uffe0\054\uffe0\001\002\000\010" +
    "\036\uffdc\037\uffdc\044\uffdc\001\002\000\032\003\uffdd\004" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\043\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\053\uffdd\054\uffdd\001\002\000\032\003" +
    "\uffdf\004\uffdf\036\uffdf\037\uffdf\040\uffdf\043\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\053\uffdf\054\uffdf\001\002\000" +
    "\010\036\ufffa\037\ufffa\044\ufffa\001\002\000\004\002\001" +
    "\001\002\000\004\021\330\001\002\000\004\002\000\001" +
    "\002\000\074\005\077\006\117\007\115\010\112\012\072" +
    "\014\073\024\135\025\075\027\127\030\074\031\110\032" +
    "\126\033\123\036\120\037\105\040\125\041\131\042\111" +
    "\043\107\044\113\045\122\046\137\047\076\050\136\051" +
    "\103\052\102\053\101\054\134\056\121\001\002\000\062" +
    "\005\077\006\117\013\uffad\027\127\030\074\031\110\032" +
    "\126\033\123\036\120\037\105\040\125\041\131\042\111" +
    "\043\107\044\113\045\122\046\137\047\076\050\136\051" +
    "\103\052\102\053\101\054\134\056\121\001\002\000\076" +
    "\003\246\005\077\006\117\010\112\012\072\015\242\016" +
    "\245\024\253\025\237\027\127\030\074\031\110\032\126" +
    "\033\123\036\120\037\105\040\125\041\131\042\111\043" +
    "\107\044\113\045\122\046\137\047\076\050\136\051\103" +
    "\052\102\053\101\054\134\056\121\001\002\000\122\003" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\056" +
    "\uff9a\001\002\000\004\071\220\001\002\000\122\003\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\032\uffa1\033\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\056\uffa1" +
    "\001\002\000\122\003\uffaa\005\uffaa\006\uffaa\007\uffaa\010" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\056\uffaa\001\002\000\076\005\uff8e\006" +
    "\uff8e\007\uff8e\010\uff8e\012\uff8e\014\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053" +
    "\uff8e\054\uff8e\056\uff8e\001\002\000\122\003\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\056\uff9d\001\002" +
    "\000\122\003\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\054\uff9e\056\uff9e\001\002\000\122\003\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\056\uff9f\001\002\000" +
    "\074\005\uff68\006\uff68\007\uff68\010\uff68\012\uff68\014\uff68" +
    "\024\uff68\025\uff68\027\uff68\030\uff68\031\uff68\032\uff68\033" +
    "\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68" +
    "\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052" +
    "\uff68\053\uff68\054\uff68\056\uff68\001\002\000\122\003\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\056\uffa7" +
    "\001\002\000\074\005\uff67\006\uff67\007\uff67\010\uff67\012" +
    "\uff67\014\uff67\024\uff67\025\uff67\027\uff67\030\uff67\031\uff67" +
    "\032\uff67\033\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042" +
    "\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050\uff67" +
    "\051\uff67\052\uff67\053\uff67\054\uff67\056\uff67\001\002\000" +
    "\122\003\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054" +
    "\uffa5\056\uffa5\001\002\000\122\003\uff99\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\056\uff99\001\002\000\122" +
    "\003\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\056\uffa6\001\002\000\062\005\077\006\117\011\uffad\027" +
    "\127\030\074\031\110\032\126\033\123\036\120\037\105" +
    "\040\125\041\131\042\111\043\107\044\113\045\122\046" +
    "\137\047\076\050\136\051\103\052\102\053\101\054\134" +
    "\056\121\001\002\000\122\003\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\056\uffa4\001\002\000\076\005" +
    "\uff8d\006\uff8d\007\uff8d\010\uff8d\012\uff8d\014\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\054\uff8d\056\uff8d\001\002\000\004\002\uff6d" +
    "\001\002\000\004\007\211\001\002\000\122\003\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\056\uffa9\001" +
    "\002\000\122\003\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\056\uffa8\001\002\000\122\003\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\056\uffab\001\002" +
    "\000\122\003\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\056\uffa3\001\002\000\122\003\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97" +
    "\051\uff97\052\uff97\053\uff97\054\uff97\056\uff97\001\002\000" +
    "\074\005\uff69\006\uff69\007\uff69\010\uff69\012\uff69\014\uff69" +
    "\024\uff69\025\uff69\027\uff69\030\uff69\031\uff69\032\uff69\033" +
    "\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69" +
    "\044\uff69\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052" +
    "\uff69\053\uff69\054\uff69\056\uff69\001\002\000\122\003\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\056\uffac" +
    "\001\002\000\122\003\uff98\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\056\uff98\001\002\000\122\003\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\036\uff9b\037\uff9b\040\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\056\uff9b\001" +
    "\002\000\076\005\uff90\006\uff90\007\uff90\010\uff90\012\uff90" +
    "\014\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\056\uff90\001\002" +
    "\000\004\042\141\001\002\000\076\005\uff91\006\uff91\007" +
    "\uff91\010\uff91\012\uff91\014\uff91\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\036\uff91\037" +
    "\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054" +
    "\uff91\056\uff91\001\002\000\074\005\077\006\117\007\uff6a" +
    "\010\112\012\072\014\073\024\135\025\075\027\127\030" +
    "\074\031\110\032\126\033\123\036\120\037\105\040\125" +
    "\041\131\042\111\043\107\044\113\045\122\046\137\047" +
    "\076\050\136\051\103\052\102\053\101\054\134\056\121" +
    "\001\002\000\122\003\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\053\uff9c\054\uff9c\056\uff9c\001\002\000\076\005\uff8f\006" +
    "\uff8f\007\uff8f\010\uff8f\012\uff8f\014\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\056\uff8f\001\002\000\122\003\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\056\uffa0\001\002" +
    "\000\122\003\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\056\uffa2\001\002\000\004\007\uff6b\001\002\000" +
    "\006\040\142\057\144\001\002\000\004\043\207\001\002" +
    "\000\004\043\205\001\002\000\004\027\145\001\002\000" +
    "\016\003\147\055\153\060\152\061\151\065\154\066\155" +
    "\001\002\000\020\036\uffc6\037\uffc6\043\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\001\002\000\020\036\uffc7\037\uffc7" +
    "\043\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000" +
    "\020\036\uffc5\037\uffc5\043\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\001\002\000\004\051\200\001\002\000\004\051" +
    "\171\001\002\000\020\036\uffcf\037\uffcf\043\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\001\002\000\004\051\163\001" +
    "\002\000\004\051\156\001\002\000\006\005\037\040\036" +
    "\001\002\000\004\052\160\001\002\000\004\027\161\001" +
    "\002\000\004\067\162\001\002\000\020\036\uffc8\037\uffc8" +
    "\043\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000" +
    "\006\005\037\040\036\001\002\000\004\052\165\001\002" +
    "\000\004\027\166\001\002\000\010\062\167\063\170\070" +
    "\042\001\002\000\020\036\uffca\037\uffca\043\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\001\002\000\020\036\uffc9\037" +
    "\uffc9\043\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002" +
    "\000\006\005\037\040\036\001\002\000\004\052\173\001" +
    "\002\000\004\027\174\001\002\000\010\062\176\063\177" +
    "\064\175\001\002\000\020\036\uffcb\037\uffcb\043\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\001\002\000\020\036\uffcd" +
    "\037\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\001" +
    "\002\000\020\036\uffcc\037\uffcc\043\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\001\002\000\006\005\037\040\036\001" +
    "\002\000\004\052\202\001\002\000\004\027\203\001\002" +
    "\000\004\062\204\001\002\000\020\036\uffce\037\uffce\043" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\001\002\000\004" +
    "\041\206\001\002\000\122\003\uff95\005\uff95\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95" +
    "\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024" +
    "\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95" +
    "\033\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043" +
    "\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\056\uff95\001\002\000\004\041" +
    "\210\001\002\000\122\003\uff96\005\uff96\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\056\uff96\001\002\000\004\002\uff6e" +
    "\001\002\000\064\005\077\006\117\011\uffad\013\uffad\027" +
    "\127\030\074\031\110\032\126\033\123\036\120\037\105" +
    "\040\125\041\131\042\111\043\107\044\113\045\122\046" +
    "\137\047\076\050\136\051\103\052\102\053\101\054\134" +
    "\056\121\001\002\000\004\011\216\001\002\000\064\005" +
    "\077\006\117\011\uffad\013\uffad\027\127\030\074\031\110" +
    "\032\126\033\123\036\120\037\105\040\125\041\131\042" +
    "\111\043\107\044\113\045\122\046\137\047\076\050\136" +
    "\051\103\052\102\053\101\054\134\056\121\001\002\000" +
    "\006\011\uffaf\013\uffaf\001\002\000\116\003\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\012\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\056\uffb3\001\002\000\006\011\uffae" +
    "\013\uffae\001\002\000\004\030\221\001\002\000\004\040" +
    "\222\001\002\000\004\031\223\001\002\000\004\030\224" +
    "\001\002\000\004\040\225\001\002\000\004\037\226\001" +
    "\002\000\004\032\227\001\002\000\072\005\077\006\117" +
    "\010\112\012\072\014\073\024\135\026\231\027\127\030" +
    "\074\031\110\032\126\033\123\036\120\037\105\040\125" +
    "\041\131\042\111\043\107\044\113\045\122\046\137\047" +
    "\076\050\136\051\103\052\102\053\101\054\134\056\121" +
    "\001\002\000\072\005\077\006\117\010\112\012\072\014" +
    "\073\024\135\026\uff63\027\127\030\074\031\110\032\126" +
    "\033\123\036\120\037\105\040\125\041\131\042\111\043" +
    "\107\044\113\045\122\046\137\047\076\050\136\051\103" +
    "\052\102\053\101\054\134\056\121\001\002\000\074\005" +
    "\uff65\006\uff65\007\uff65\010\uff65\012\uff65\014\uff65\024\uff65" +
    "\025\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\036" +
    "\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65" +
    "\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053" +
    "\uff65\054\uff65\056\uff65\001\002\000\072\005\uff61\006\uff61" +
    "\010\uff61\012\uff61\014\uff61\024\uff61\026\uff61\027\uff61\030" +
    "\uff61\031\uff61\032\uff61\033\uff61\036\uff61\037\uff61\040\uff61" +
    "\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61\047" +
    "\uff61\050\uff61\051\uff61\052\uff61\053\uff61\054\uff61\056\uff61" +
    "\001\002\000\004\026\235\001\002\000\072\005\uff62\006" +
    "\uff62\010\uff62\012\uff62\014\uff62\024\uff62\026\uff62\027\uff62" +
    "\030\uff62\031\uff62\032\uff62\033\uff62\036\uff62\037\uff62\040" +
    "\uff62\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62" +
    "\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\056" +
    "\uff62\001\002\000\074\005\uff66\006\uff66\007\uff66\010\uff66" +
    "\012\uff66\014\uff66\024\uff66\025\uff66\027\uff66\030\uff66\031" +
    "\uff66\032\uff66\033\uff66\036\uff66\037\uff66\040\uff66\041\uff66" +
    "\042\uff66\043\uff66\044\uff66\045\uff66\046\uff66\047\uff66\050" +
    "\uff66\051\uff66\052\uff66\053\uff66\054\uff66\056\uff66\001\002" +
    "\000\004\026\uff64\001\002\000\004\071\307\001\002\000" +
    "\110\003\uff89\005\uff89\006\uff89\010\uff89\012\uff89\015\uff89" +
    "\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024" +
    "\uff89\025\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\053\uff89\054\uff89\056\uff89\001\002\000\076\003\246\005" +
    "\077\006\117\010\112\012\072\015\uff71\016\245\024\253" +
    "\025\237\027\127\030\074\031\110\032\126\033\123\036" +
    "\120\037\105\040\125\041\131\042\111\043\107\044\113" +
    "\045\122\046\137\047\076\050\136\051\103\052\102\053" +
    "\101\054\134\056\121\001\002\000\076\005\uff75\006\uff75" +
    "\007\uff75\010\uff75\012\uff75\014\uff75\024\uff75\025\uff75\026" +
    "\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\036\uff75" +
    "\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045" +
    "\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75" +
    "\054\uff75\056\uff75\001\002\000\110\003\uff88\005\uff88\006" +
    "\uff88\010\uff88\012\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\027\uff88\030" +
    "\uff88\031\uff88\032\uff88\033\uff88\036\uff88\037\uff88\040\uff88" +
    "\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047" +
    "\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\056\uff88" +
    "\001\002\000\076\003\246\005\077\006\117\010\112\012" +
    "\072\015\uff72\016\245\024\253\025\237\027\127\030\074" +
    "\031\110\032\126\033\123\036\120\037\105\040\125\041" +
    "\131\042\111\043\107\044\113\045\122\046\137\047\076" +
    "\050\136\051\103\052\102\053\101\054\134\056\121\001" +
    "\002\000\076\003\264\005\077\006\117\010\112\012\072" +
    "\017\265\020\260\022\263\024\253\027\127\030\074\031" +
    "\110\032\126\033\123\036\120\037\105\040\125\041\131" +
    "\042\111\043\107\044\113\045\122\046\137\047\076\050" +
    "\136\051\103\052\102\053\101\054\134\056\121\001\002" +
    "\000\004\015\256\001\002\000\076\003\246\005\077\006" +
    "\117\010\112\012\072\015\uff70\016\245\024\253\025\237" +
    "\027\127\030\074\031\110\032\126\033\123\036\120\037" +
    "\105\040\125\041\131\042\111\043\107\044\113\045\122" +
    "\046\137\047\076\050\136\051\103\052\102\053\101\054" +
    "\134\056\121\001\002\000\110\003\uff8b\005\uff8b\006\uff8b" +
    "\010\uff8b\012\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\027\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\056\uff8b\001" +
    "\002\000\004\015\254\001\002\000\110\003\uff8c\005\uff8c" +
    "\006\uff8c\010\uff8c\012\uff8c\015\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\033\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\056" +
    "\uff8c\001\002\000\110\003\uff8a\005\uff8a\006\uff8a\010\uff8a" +
    "\012\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042" +
    "\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a" +
    "\051\uff8a\052\uff8a\053\uff8a\054\uff8a\056\uff8a\001\002\000" +
    "\076\005\uff76\006\uff76\007\uff76\010\uff76\012\uff76\014\uff76" +
    "\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032" +
    "\uff76\033\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76" +
    "\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051" +
    "\uff76\052\uff76\053\uff76\054\uff76\056\uff76\001\002\000\004" +
    "\015\uff6f\001\002\000\100\003\uff82\005\uff82\006\uff82\010" +
    "\uff82\012\uff82\015\uff82\016\uff82\024\uff82\025\uff82\026\uff82" +
    "\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82" +
    "\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054" +
    "\uff82\056\uff82\001\002\000\076\003\264\005\077\006\117" +
    "\010\112\012\072\017\uff7c\020\260\022\263\024\253\027" +
    "\127\030\074\031\110\032\126\033\123\036\120\037\105" +
    "\040\125\041\131\042\111\043\107\044\113\045\122\046" +
    "\137\047\076\050\136\051\103\052\102\053\101\054\134" +
    "\056\121\001\002\000\072\003\274\005\077\006\117\010" +
    "\112\012\072\021\302\024\253\027\127\030\074\031\110" +
    "\032\126\033\123\036\120\037\105\040\125\041\131\042" +
    "\111\043\107\044\113\045\122\046\137\047\076\050\136" +
    "\051\103\052\102\053\101\054\134\056\121\001\002\000" +
    "\076\003\264\005\077\006\117\010\112\012\072\017\uff7f" +
    "\020\260\022\263\024\253\027\127\030\074\031\110\032" +
    "\126\033\123\036\120\037\105\040\125\041\131\042\111" +
    "\043\107\044\113\045\122\046\137\047\076\050\136\051" +
    "\103\052\102\053\101\054\134\056\121\001\002\000\076" +
    "\003\264\005\077\006\117\010\112\012\072\017\uff7e\020" +
    "\260\022\263\024\253\027\127\030\074\031\110\032\126" +
    "\033\123\036\120\037\105\040\125\041\131\042\111\043" +
    "\107\044\113\045\122\046\137\047\076\050\136\051\103" +
    "\052\102\053\101\054\134\056\121\001\002\000\072\003" +
    "\274\005\077\006\117\010\112\012\072\023\273\024\253" +
    "\027\127\030\074\031\110\032\126\033\123\036\120\037" +
    "\105\040\125\041\131\042\111\043\107\044\113\045\122" +
    "\046\137\047\076\050\136\051\103\052\102\053\101\054" +
    "\134\056\121\001\002\000\004\017\270\001\002\000\100" +
    "\003\uff83\005\uff83\006\uff83\010\uff83\012\uff83\015\uff83\016" +
    "\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042" +
    "\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83" +
    "\051\uff83\052\uff83\053\uff83\054\uff83\056\uff83\001\002\000" +
    "\004\017\267\001\002\000\100\003\uff84\005\uff84\006\uff84" +
    "\010\uff84\012\uff84\015\uff84\016\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84" +
    "\054\uff84\056\uff84\001\002\000\076\003\uff85\005\uff85\006" +
    "\uff85\010\uff85\012\uff85\017\uff85\020\uff85\022\uff85\024\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054" +
    "\uff85\056\uff85\001\002\000\004\023\276\001\002\000\074" +
    "\003\274\005\077\006\117\010\112\012\072\021\uffb1\023" +
    "\uffb1\024\253\027\127\030\074\031\110\032\126\033\123" +
    "\036\120\037\105\040\125\041\131\042\111\043\107\044" +
    "\113\045\122\046\137\047\076\050\136\051\103\052\102" +
    "\053\101\054\134\056\121\001\002\000\076\003\uff86\005" +
    "\uff86\006\uff86\010\uff86\012\uff86\017\uff86\020\uff86\022\uff86" +
    "\024\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86" +
    "\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053" +
    "\uff86\054\uff86\056\uff86\001\002\000\006\021\uffb0\023\uffb0" +
    "\001\002\000\006\021\uffb2\023\uffb2\001\002\000\076\003" +
    "\uff87\005\uff87\006\uff87\010\uff87\012\uff87\017\uff87\020\uff87" +
    "\022\uff87\024\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87" +
    "\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052" +
    "\uff87\053\uff87\054\uff87\056\uff87\001\002\000\004\017\uff80" +
    "\001\002\000\004\017\uff81\001\002\000\004\021\303\001" +
    "\002\000\076\003\uff92\005\uff92\006\uff92\010\uff92\012\uff92" +
    "\017\uff92\020\uff92\022\uff92\024\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050" +
    "\uff92\051\uff92\052\uff92\053\uff92\054\uff92\056\uff92\001\002" +
    "\000\076\003\uff93\005\uff93\006\uff93\010\uff93\012\uff93\017" +
    "\uff93\020\uff93\022\uff93\024\uff93\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93" +
    "\051\uff93\052\uff93\053\uff93\054\uff93\056\uff93\001\002\000" +
    "\004\017\uff7d\001\002\000\004\015\uff74\001\002\000\004" +
    "\015\uff73\001\002\000\004\030\310\001\002\000\004\040" +
    "\311\001\002\000\004\031\312\001\002\000\004\030\313" +
    "\001\002\000\004\040\314\001\002\000\004\037\315\001" +
    "\002\000\004\032\316\001\002\000\010\003\317\016\245" +
    "\026\322\001\002\000\006\015\256\026\325\001\002\000" +
    "\004\026\324\001\002\000\010\003\317\016\245\026\uff7a" +
    "\001\002\000\076\003\uff77\005\uff77\006\uff77\010\uff77\012" +
    "\uff77\015\uff77\016\uff77\024\uff77\025\uff77\027\uff77\030\uff77" +
    "\031\uff77\032\uff77\033\uff77\036\uff77\037\uff77\040\uff77\041" +
    "\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77" +
    "\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\056\uff77\001" +
    "\002\000\004\026\uff7b\001\002\000\076\003\uff78\005\uff78" +
    "\006\uff78\010\uff78\012\uff78\015\uff78\016\uff78\024\uff78\025" +
    "\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045" +
    "\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78" +
    "\054\uff78\056\uff78\001\002\000\004\026\uff79\001\002\000" +
    "\004\013\327\001\002\000\116\003\uff94\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\012\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053" +
    "\uff94\054\uff94\056\uff94\001\002\000\004\002\uff6c\001\002" +
    "\000\006\003\ufffe\004\ufffe\001\002\000\006\003\341\040" +
    "\343\001\002\000\014\003\ufffb\004\ufffb\040\ufffb\053\ufffb" +
    "\054\ufffb\001\002\000\012\003\347\040\352\056\354\057" +
    "\353\001\002\000\022\003\ufff3\004\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\046\ufff3\053\ufff3\054\ufff3\001\002\000\006\036" +
    "\337\037\340\001\002\000\006\003\341\040\343\001\002" +
    "\000\022\003\ufff6\004\ufff6\036\ufff6\037\ufff6\040\ufff6\046" +
    "\ufff6\053\ufff6\054\ufff6\001\002\000\004\037\346\001\002" +
    "\000\022\003\ufff5\004\ufff5\036\ufff5\037\ufff5\040\ufff5\046" +
    "\ufff5\053\ufff5\054\ufff5\001\002\000\010\036\ufff7\037\ufff7" +
    "\044\ufff7\001\002\000\010\036\332\037\335\044\334\001" +
    "\002\000\022\003\ufff9\004\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\046\ufff9\053\ufff9\054\ufff9\001\002\000\022\003\ufff8\004" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\046\ufff8\053\ufff8\054\ufff8" +
    "\001\002\000\010\036\332\037\335\044\334\001\002\000" +
    "\010\036\uffee\037\uffee\046\u0101\001\002\000\006\036\ufff2" +
    "\037\ufff2\001\002\000\010\036\uffed\037\uffed\046\377\001" +
    "\002\000\004\027\370\001\002\000\010\036\ufff0\037\ufff0" +
    "\046\355\001\002\000\016\003\356\005\363\006\362\040" +
    "\357\056\364\057\144\001\002\000\010\036\332\037\335" +
    "\044\334\001\002\000\010\036\uffe5\037\uffe5\046\uffe5\001" +
    "\002\000\010\036\ufff1\037\ufff1\046\365\001\002\000\010" +
    "\036\uffe7\037\uffe7\046\uffe7\001\002\000\010\036\uffe8\037" +
    "\uffe8\046\uffe8\001\002\000\010\036\uffe9\037\uffe9\046\uffe9" +
    "\001\002\000\010\036\uffe6\037\uffe6\046\uffe6\001\002\000" +
    "\016\003\356\005\363\006\362\040\357\056\364\057\144" +
    "\001\002\000\010\036\uffea\037\uffea\046\uffea\001\002\000" +
    "\010\036\uffe4\037\uffe4\046\uffe4\001\002\000\016\003\147" +
    "\055\153\060\152\061\151\065\372\066\155\001\002\000" +
    "\010\036\uffd0\037\uffd0\046\uffd0\001\002\000\004\051\373" +
    "\001\002\000\006\005\037\040\036\001\002\000\004\052" +
    "\375\001\002\000\004\027\376\001\002\000\006\062\167" +
    "\063\170\001\002\000\016\003\356\005\363\006\362\040" +
    "\357\056\364\057\144\001\002\000\010\036\uffec\037\uffec" +
    "\046\365\001\002\000\016\003\356\005\363\006\362\040" +
    "\357\056\364\057\144\001\002\000\010\036\uffef\037\uffef" +
    "\046\365\001\002\000\006\036\uffeb\037\uffeb\001\002\000" +
    "\022\003\ufff4\004\ufff4\036\ufff4\037\ufff4\040\ufff4\046\ufff4" +
    "\053\ufff4\054\ufff4\001\002\000\010\036\uffe2\037\uffe2\044" +
    "\uffe2\001\002\000\020\003\u010f\005\u010c\006\u0109\040\u010b" +
    "\042\u010d\056\u0107\057\144\001\002\000\014\037\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\001\002\000\014\037\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\001\002\000\014\037" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\001\002\000\014" +
    "\037\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\001\002\000" +
    "\014\037\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\001\002" +
    "\000\014\037\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\001" +
    "\002\000\016\003\026\005\033\006\032\040\027\042\030" +
    "\065\031\001\002\000\014\037\u0115\045\u0113\046\u0111\047" +
    "\u0114\050\u0112\001\002\000\004\037\u0110\001\002\000\014" +
    "\037\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\001\002\000" +
    "\020\003\u010f\005\u010c\006\u0109\040\u010b\042\u010d\056\u0107" +
    "\057\144\001\002\000\020\003\u010f\005\u010c\006\u0109\040" +
    "\u010b\042\u010d\056\u0107\057\144\001\002\000\020\003\u010f" +
    "\005\u010c\006\u0109\040\u010b\042\u010d\056\u0107\057\144\001" +
    "\002\000\020\003\u010f\005\u010c\006\u0109\040\u010b\042\u010d" +
    "\056\u0107\057\144\001\002\000\014\003\uffc1\004\uffc1\040" +
    "\uffc1\053\uffc1\054\uffc1\001\002\000\014\037\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\001\002\000\014\037\uffbe\045" +
    "\uffbe\046\uffbe\047\u0114\050\u0112\001\002\000\014\037\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\001\002\000\014\037" +
    "\uffbf\045\uffbf\046\uffbf\047\u0114\050\u0112\001\002\000\014" +
    "\043\u011b\045\047\046\044\047\050\050\046\001\002\000" +
    "\014\037\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\001\002" +
    "\000\006\003\uffff\004\uffff\001\002\000\006\003\ufffd\004" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\022\002\012\003\004\004\011\005\007\011" +
    "\005\013\015\017\013\020\003\001\001\000\020\002\u011c" +
    "\003\004\004\011\005\007\011\005\013\015\020\003\001" +
    "\001\000\020\002\u011b\003\004\004\011\005\007\011\005" +
    "\013\015\020\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\332\010\335\001\001\000\002\001\001" +
    "\000\020\002\330\003\004\004\011\005\007\011\005\013" +
    "\015\020\003\001\001\000\004\053\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\021\016\017\001" +
    "\001\000\006\015\063\022\057\001\001\000\002\001\001" +
    "\000\006\033\024\034\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\054\016\017\001\001\000\002\001\001\000\006\033" +
    "\024\034\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\024\034\053\001\001\000\002\001\001\000\006" +
    "\033\024\034\052\001\001\000\006\033\024\034\051\001" +
    "\001\000\006\033\024\034\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\060\022\057\001\001\000\002" +
    "\001\001\000\006\014\062\016\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\035\131\037\077\040\113\041\127" +
    "\043\123\051\103\054\115\055\132\056\105\001\001\000" +
    "\010\036\325\037\213\040\211\001\001\000\022\035\251" +
    "\037\237\040\242\041\247\045\243\047\246\050\240\052" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\036\212\037\213" +
    "\040\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\035\131\037\077\040\113\041\127" +
    "\043\123\051\103\054\137\055\132\056\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\145\033\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\216\037\213\040\211\001\001\000" +
    "\002\001\001\000\010\036\214\037\213\040\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\035\131\037\077\040\113\041\127\043\233" +
    "\051\231\057\232\060\227\001\001\000\022\035\131\037" +
    "\077\040\113\041\127\043\233\051\231\057\235\060\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\035\251\037" +
    "\237\040\242\041\247\045\243\047\246\050\240\052\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\035" +
    "\251\037\237\040\242\041\247\045\243\047\246\050\240" +
    "\052\304\001\001\000\022\035\251\037\237\040\242\041" +
    "\247\042\261\044\260\046\265\050\256\001\001\000\002" +
    "\001\001\000\022\035\251\037\237\040\242\041\247\045" +
    "\243\047\246\050\240\052\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\035\251\037\237\040\242\041\247\042\261\044\260\046" +
    "\303\050\256\001\001\000\016\012\300\035\251\037\237" +
    "\040\242\041\247\050\271\001\001\000\022\035\251\037" +
    "\237\040\242\041\247\042\261\044\260\046\277\050\256" +
    "\001\001\000\022\035\251\037\237\040\242\041\247\042" +
    "\261\044\260\046\276\050\256\001\001\000\016\012\270" +
    "\035\251\037\237\040\242\041\247\050\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\274\035\251\037\237\040\242\041\247\050\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\320\061\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\320\061\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0103\021\343\001\001\000\002\001" +
    "\001\000\006\024\350\026\347\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\341\021\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\344\010\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\u0102\010\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\357\030\360" +
    "\001\001\000\006\007\366\010\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\365\030" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\373\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\377\030\360\001\001\000" +
    "\002\001\001\000\006\025\u0101\030\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\u0109\030\u0107\031\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\024" +
    "\034\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\u0109\030\u0107\031\u0118\001\001" +
    "\000\010\023\u0109\030\u0107\031\u0117\001\001\000\010\023" +
    "\u0109\030\u0107\031\u0116\001\001\000\010\023\u0109\030\u0107" +
    "\031\u0115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parserhtml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parserhtml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parserhtml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
/*declaracion de variables para capturar Strigns para la tabla de simbolos*/

 /* Connect this parser to a scanner!*/
        private TableSimbol VarGlobal = new TableSimbol();
        private TableSimbolHtml tabla = new TableSimbolHtml();
        private boolean isString=false;
        String operatiosss = "";
        private AccionesSalida actionSalid= new AccionesSalida();
        private ArrayList<Errors> errores = new ArrayList<>();


	public Parserhtml(LexerHtml analizadorLexico) {
		super(analizadorLexico);
	}

        @Override
        public void syntax_error(Symbol tok) {
	      String esperado = "un terminal xd";
	    try{
                List<Integer> lista=expected_token_ids();
                if(!lista.isEmpty()){
                       if(lista.get(0)<=50){
                               esperado = sym.terminalNames[lista.get(0)];
                       } 
                }
	        Token token = (Token) tok.value;
	        report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
                errores.add(new Errors(token.getLexeme(),token.getLine(),token.getColumn(),"Se esperaba :"+esperado,"Sintactico"));
            }catch(Exception e){
	        Token token = (Token) tok.value;
	        report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
                errores.add(new Errors(token.getLexeme(),token.getLine(),token.getColumn(),"Se esperaba :"+esperado,"Sintactico"));
	    }	
	}


    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             System.out.println("SE ESPERABA UNA LLAVE FINAL");  
             errores.add(new Errors("",0,0,"Se llego al final, se esperaba el terminal de Cierre","Sintactico"));
        }else{
             Token token = (Token) cur_token.value;
	     report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
             errores.add(new Errors(token.getLexeme(),token.getLine(),token.getColumn(),"No se pude recuperar de manera correcta","Sintactico"));        
        }
    }
    public ArrayList<Errors> getErrores() {
        return errores;
    }

    public void setErrores(ArrayList<Errors> errores) {
        this.errores = errores;
    } 

 @Override
        public List<Integer> expected_token_ids() {
                return super.expected_token_ids();
        }

   public void setTablaHtml(TableSimbolHtml tabla){
        this.tabla = tabla;
    }
    public TableSimbolHtml getTableHtml(){
        return this.tabla;
    }

    public void setTabla(TableSimbol tabla){
        this.VarGlobal = tabla;
    }
    public TableSimbol getTable(){
        return this.VarGlobal;
    }

    public AccionesSalida getActionSalid() {
        return actionSalid;
    }

    public void setActionSalid(AccionesSalida actionSalid) {
        this.actionSalid = actionSalid;
    }

    
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parserhtml$actions {
  private final Parserhtml parser;

  /** Constructor */
  CUP$Parserhtml$actions(Parserhtml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parserhtml$do_action_part00000000(
    int                        CUP$Parserhtml$act_num,
    java_cup.runtime.lr_parser CUP$Parserhtml$parser,
    java.util.Stack            CUP$Parserhtml$stack,
    int                        CUP$Parserhtml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parserhtml$result;

      /* select the action based on the action number */
      switch (CUP$Parserhtml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		RESULT = start_val;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parserhtml$parser.done_parsing();
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= def_variable def_html_General 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // def_variable ::= variable_integer def_variable 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // def_variable ::= variable_String def_variable 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def_variable ::= var_Asign def_variable 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_variable ::= 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variable_String ::= strin items 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("variable_String",2, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // strin ::= STRING IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		tabla.capturarVarible("String",identificador, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("strin",3, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // items_coma ::= iddItemsComodin items 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items_coma",4, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // items_coma ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items_coma",4, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // iddItemsComodin ::= IDD 
            {
              Object RESULT =null;
		int nomVarleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int nomVarright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token nomVar = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		tabla.capturarVarible("String",nomVar, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("iddItemsComodin",15, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // items ::= asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // items ::= asignacion COMA items_coma 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= IGUAL operationString 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		tabla.capturarContenido(contenido);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operationString ::= CADENA MAS concatenacion 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		Token cadena = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT= cadena.getLexeme()+contenido;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationString",18, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operationString ::= CADENA 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationString",18, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operationString ::= subTerminalTabla MAS concatenacion 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int contenido1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenido1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido1 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido + contenido1;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationString",18, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operationString ::= subTerminalTabla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido; 
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationString",18, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operationString ::= IDD 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(identificador,true,errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationString",18, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operationString ::= IDD MAS concatenacion 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(identificador , true,errores)+contenido;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationString",18, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operationString ::= error items 
            {
              String RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationString",18, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // concatenacion ::= concatenacion MAS concatenacion 
            {
              String RESULT =null;
		int contenido1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int contenido1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		String contenido1 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int contenido2left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenido2right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido2 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido1 +contenido2;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("concatenacion",19, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // concatenacion ::= ENTERO 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("concatenacion",19, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // concatenacion ::= DECIMAL 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("concatenacion",19, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // concatenacion ::= terminalTabla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("concatenacion",19, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // concatenacion ::= CADENA 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("concatenacion",19, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // concatenacion ::= IDD 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(identificador,false,errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("concatenacion",19, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // concatenacion ::= error items 
            {
              String RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("concatenacion",19, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable_integer ::= inte items_int 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("variable_integer",1, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inte ::= INTEGER IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		tabla.capturarVarible("Integer",identificador, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("inte",9, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // items_int ::= asignacionInt PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // items_int ::= asignacionInt COMA items_coma_B 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // items_int ::= COMA items_coma_B 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // items_int ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // items_coma_B ::= iddComodinInt items_int 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("items_coma_B",11, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // iddComodinInt ::= IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		tabla.capturarVarible("Integer",identificador, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("iddComodinInt",16, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacionInt ::= IGUAL operation 
            {
              Object RESULT =null;
		int valOperationleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int valOperationright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Integer valOperation = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		try{tabla.capturarContenido(String.valueOf(valOperation)); System.out.println(String.valueOf(valOperation));}catch(Exception e){e.printStackTrace();}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("asignacionInt",12, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= operation MAS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		try{RESULT = numero2+numero1;}catch(Exception e){}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= operation MENOS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		try{RESULT = numero1-numero2;}catch(Exception e){}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= operation POR operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		try{RESULT = numero2*numero1;}catch(Exception e){}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= operation DIVISION operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		try{RESULT = numero1/numero2;}catch(Exception e){}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= ENTERO 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		try{RESULT = Integer.valueOf( num.getLexeme());}catch(Exception e){}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= DECIMAL 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		try{RESULT = (int)Double.parseDouble( num.getLexeme());}catch(Exception e){}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= parametros 
            {
              Integer RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Integer numero = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT= numero;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= IDD 
            {
              Integer RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.contenidNumeroVariable(identificador, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= PARENTESISA operation PARENTESISC 
            {
              Integer RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		try{RESULT = operacion;}catch(Exception e){}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operation ::= error items_int 
            {
              Integer RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operation",26, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // subTerminalTabla ::= RESULT PUNTO def_var_Globla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("subTerminalTabla",20, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // def_var_Globla ::= SCORE 
            {
              String RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token score = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = ""+VarGlobal.getScore();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_var_Globla",21, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // def_var_Globla ::= CLASES CORCHETEA index CORCHETEC PUNTO NOMBRE 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).value;
		RESULT = VarGlobal.recuperarNombreClass(indice, pos, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_var_Globla",21, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-5)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // def_var_Globla ::= VARIABLES CORCHETEA index CORCHETEC PUNTO NOMBRE 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).value;
		RESULT = VarGlobal.recuperacionNomVar(indice,pos, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_var_Globla",21, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-5)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // def_var_Globla ::= VARIABLES CORCHETEA index CORCHETEC PUNTO TIPO 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).value;
		RESULT = VarGlobal.recuperacionTipoVar(indice,pos, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_var_Globla",21, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-5)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // def_var_Globla ::= VARIABLES CORCHETEA index CORCHETEC PUNTO FUNCION 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).value;
		RESULT = VarGlobal.recupearacionFuncionPadreVAr(indice, pos, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_var_Globla",21, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-5)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // def_var_Globla ::= METODOS CORCHETEA index CORCHETEC PUNTO NOMBRE 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).value;
		RESULT = VarGlobal.recuperacionNombreMetodo(indice, pos, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_var_Globla",21, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-5)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // def_var_Globla ::= METODOS CORCHETEA index CORCHETEC PUNTO TIPO 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).value;
		RESULT = VarGlobal.recuperacionTipoMetodo(indice,pos, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_var_Globla",21, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-5)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // def_var_Globla ::= COMENTARIOS CORCHETEA index CORCHETEC PUNTO TEXTO 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).value;
		RESULT = VarGlobal.recuperarTextoComentario(indice, pos, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_var_Globla",21, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-5)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // def_var_Globla ::= error 
            {
              String RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_var_Globla",21, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // terminalTabla ::= RESULT PUNTO def_var_Globla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("terminalTabla",22, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // terminalTabla ::= RESULT PUNTO parametros 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Integer contenido = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = ""+ contenido;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("terminalTabla",22, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros ::= METODOS CORCHETEA index CORCHETEC PUNTO PARAMTETROS 
            {
              Integer RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)).value;
		RESULT = VarGlobal.recuperarParametrosMetodos(indice, pos,errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("parametros",25, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-5)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // index ::= ENTERO 
            {
              Integer RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		try{RESULT = Integer.valueOf( numero.getLexeme());}catch(Exception e){RESULT =0;}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // index ::= IDD 
            {
              Integer RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.contenidNumeroVariable(numero, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("index",24, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_Asign ::= iddVarComodin IGUAL operationAsig PUNTOCOMA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		tabla.capturarConteniYadeclarad(contenido, isString, errores); tabla.setReporError(true);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("var_Asign",14, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-3)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iddVarComodin ::= IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		isString=tabla.tipoAsignacion(identificador, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("iddVarComodin",7, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operationAsig ::= operationAsig MAS operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.accionSuma(isString, numero1,numero2,operador,errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operationAsig ::= operationAsig MENOS operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.accionResta(isString, numero1,numero2,operador, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operationAsig ::= operationAsig POR operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.accionMultiplicar(isString, numero1,numero2,operador, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operationAsig ::= operationAsig DIVISION operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.accionDividir(isString, numero1,numero2,operador, errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operationAsig ::= ENTERO 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operationAsig ::= DECIMAL 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operationAsig ::= terminalTabla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operationAsig ::= CADENA 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = contenido.getLexeme();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operationAsig ::= IDD 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(num,false,errores);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operationAsig ::= operationaux 
            {
              String RESULT =null;
		try{RESULT = operatiosss;}catch(Exception e){e.printStackTrace();}
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operationAsig ::= error PUNTOCOMA 
            {
              String RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationAsig",23, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operationaux ::= PARENTESISA operation PARENTESISC 
            {
              Object RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)).value;
		operatiosss= ""+operacion;
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("operationaux",17, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // title1 ::= H1ABRE itemHtml H1CIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("title1",27, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // titleRescursiver ::= comodintitle titleRescursiver 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // titleRescursiver ::= comodintitle 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // titleRescursiver ::= error 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // itemHtml ::= comodinIddHtml itemHtml 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("itemHtml",28, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // itemHtml ::= usoVarGlobal itemHtml 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("itemHtml",28, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // itemHtml ::= 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("itemHtml",28, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comodinIddHtml ::= IDD 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comodinIddHtml ::= CADENA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comodinIddHtml ::= ENTERO 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comodinIddHtml ::= DECIMAL 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comodinIddHtml ::= COMA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comodinIddHtml ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comodinIddHtml ::= PARENTESISA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comodinIddHtml ::= PARENTESISC 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comodinIddHtml ::= IGUAL 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comodinIddHtml ::= MENOS 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comodinIddHtml ::= MAS 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comodinIddHtml ::= POR 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comodinIddHtml ::= DIVISION 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comodinIddHtml ::= CORCHETEA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // comodinIddHtml ::= CORCHETEC 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // comodinIddHtml ::= INTEGER 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // comodinIddHtml ::= STRING 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // comodinIddHtml ::= PUNTO 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // comodinIddHtml ::= DOSPUNTO 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // comodinIddHtml ::= HASTA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // comodinIddHtml ::= MAYOR 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // comodinIddHtml ::= MENOR 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexeme());
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",29, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // usoVarGlobal ::= COMODIN PARENTESISA IDD PARENTESISC COMODIN 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		actionSalid.setContenidoTem(tabla.contenidoVariableString(identificador,false,errores));
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("usoVarGlobal",30, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // usoVarGlobal ::= COMODIN PARENTESISA terminalTabla PARENTESISC COMODIN 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)).value;
		actionSalid.setContenidoTem(contenido);
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("usoVarGlobal",30, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-4)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // title2 ::= H2ABRE itemHtml H2CIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("title2",31, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // columTitle ::= THABRE titleRescursiver THCIERRE 
            {
              Object RESULT =null;
		actionSalid.capturarTH();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("columTitle",32, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // columTitle ::= THABRE THCIERRE 
            {
              Object RESULT =null;
		actionSalid.capturarTH();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("columTitle",32, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comodinH1H2 ::= title1 
            {
              Object RESULT =null;
		actionSalid.capturaH1();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinH1H2",33, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comodinH1H2 ::= title2 
            {
              Object RESULT =null;
		actionSalid.capturaH2();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinH1H2",33, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comodinH1H2 ::= SALTO 
            {
              Object RESULT =null;
		actionSalid.capturaBr();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinH1H2",33, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comodinH1H2 ::= comodinIddHtml 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinH1H2",33, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comodinH1H2 ::= usoVarGlobal 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinH1H2",33, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // comodintitle ::= title1 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodintitle",38, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // comodintitle ::= title2 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodintitle",38, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // comodintitle ::= SALTO 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodintitle",38, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // comodintitle ::= comodinIddHtml 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodintitle",38, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // comodintitle ::= usoVarGlobal 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodintitle",38, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // columDatos ::= TDABRE titleRescursiver TDCIERRE 
            {
              Object RESULT =null;
		actionSalid.capturarTD();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("columDatos",34, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // columDatos ::= TDABRE TDCIERRE 
            {
              Object RESULT =null;
		actionSalid.capturarTD();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("columDatos",34, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // columDatos ::= error TRCIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("columDatos",34, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // fila_columna ::= TRABRE validosTR TRCIERRE 
            {
              Object RESULT =null;
		actionSalid.capturarTR();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("fila_columna",35, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // fila_columna ::= TRABRE TRCIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("fila_columna",35, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // fila_columna ::= error TABLACIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("fila_columna",35, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // validosTR ::= columDatos validosTR 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("validosTR",36, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // validosTR ::= columTitle validosTR 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("validosTR",36, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // validosTR ::= columDatos 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("validosTR",36, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // validosTR ::= columTitle 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("validosTR",36, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // validosTR ::= comodintitle validosTR 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("validosTR",36, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // validosTR ::= comodintitle 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("validosTR",36, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // fila_columnaRecur ::= fila_columna fila_columnaRecur 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("fila_columnaRecur",47, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // fila_columnaRecur ::= fila_columna 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("fila_columnaRecur",47, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // fila_columnaRecur ::= error FORCIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("fila_columnaRecur",47, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // forAnidado ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR fila_columnaRecur FORCIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("forAnidado",37, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-10)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // forAnidado ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR FORCIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("forAnidado",37, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-9)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // def_table ::= TABLAABRE comodinTable TABLACIERRE 
            {
              Object RESULT =null;
		actionSalid.caputararTable();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_table",39, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // def_table ::= TABLAABRE TABLACIERRE 
            {
              Object RESULT =null;
		actionSalid.caputararTable();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_table",39, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // comodinTable ::= fila_columna comodinTable 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // comodinTable ::= comodintitle comodinTable 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // comodinTable ::= fila_columna 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // comodinTable ::= comodintitle 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // comodinTable ::= forAnidado 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // comodinTable ::= forAnidado comodinTable 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("comodinTable",40, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // def_html_General ::= HTMABRE sentencias HTMCIERRE 
            {
              Object RESULT =null;
		actionSalid.tostring();
              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_html_General",41, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-2)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // def_html_General ::= HTMABRE HTMCIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_html_General",41, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // def_html_General ::= error THCIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_html_General",41, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("sentencias",42, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("sentencias",42, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentencia ::= comodinH1H2 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("sentencia",43, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sentencia ::= def_table 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("sentencia",43, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sentencia ::= def_for 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("sentencia",43, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // def_for ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR sentenciasFro FORCIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_for",44, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-10)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // def_for ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR FORCIERRE 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("def_for",44, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-9)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sentenciasFro ::= sentenciaFor sentenciasFro 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("sentenciasFro",45, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.elementAt(CUP$Parserhtml$top-1)), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentenciasFro ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("sentenciasFro",45, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentenciaFor ::= comodinH1H2 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("sentenciaFor",46, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentenciaFor ::= def_table 
            {
              Object RESULT =null;

              CUP$Parserhtml$result = parser.getSymbolFactory().newSymbol("sentenciaFor",46, ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserhtml$stack.peek()), RESULT);
            }
          return CUP$Parserhtml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parserhtml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parserhtml$do_action(
    int                        CUP$Parserhtml$act_num,
    java_cup.runtime.lr_parser CUP$Parserhtml$parser,
    java.util.Stack            CUP$Parserhtml$stack,
    int                        CUP$Parserhtml$top)
    throws java.lang.Exception
    {
              return CUP$Parserhtml$do_action_part00000000(
                               CUP$Parserhtml$act_num,
                               CUP$Parserhtml$parser,
                               CUP$Parserhtml$stack,
                               CUP$Parserhtml$top);
    }
}

}
