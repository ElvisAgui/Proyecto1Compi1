/*Seccion codigo Imports Package */
package com.compiladores1.appcliente.analizadores;
import java_cup.runtime.*;
import com.compiladores1.appcliente.analizadores.*;
import com.compiladores1.appcliente.tableSimbol.*;
import com.compiladores1.appcliente.salidHtml.*;


 /* Codigo java del parser*/
parser code {:   
/*declaracion de variables para capturar Strigns para la tabla de simbolos*/

 /* Connect this parser to a scanner!*/
        private TableSimbol VarGlobal = new TableSimbol();
        private TableSimbolHtml tabla = new TableSimbolHtml();
        private boolean isString=false;
        String operatiosss = "";
        private AccionesSalida actionSalid= new AccionesSalida();
        
	public Parserhtml(LexerHtml analizadorLexico) {
		super(analizadorLexico);
	}

        @Override
        public void syntax_error(Symbol tok) {
	    try{
	        Token token = (Token) tok.value;
	        report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
	    }catch(Exception e){
                e.printStackTrace();
	    }	
	}


    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
             System.out.println("SE ESPERABA UNA LLAVE FINAL");  
        }else{
             Token token = (Token) cur_token.value;
	     report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
        }
    }


   public void setTablaHtml(TableSimbolHtml tabla){
        this.tabla = tabla;
    }
    public TableSimbolHtml getTableHtml(){
        return this.tabla;
    }

    public void setTabla(TableSimbol tabla){
        this.VarGlobal = tabla;
    }
    public TableSimbol getTable(){
        return this.VarGlobal;
    }
:};


/*seccion de Terminales*/ 

terminal Token HTMABRE,ENTERO,DECIMAL,HTMCIERRE,H1ABRE,H1CIERRE,H2ABRE,H2CIERRE,TABLAABRE,TABLACIERRE,TRABRE,TRCIERRE,THABRE;
terminal Token THCIERRE,TDABRE,TDCIERRE,SALTO,FORABRE,FORCIERRE,PUNTO,DOSPUNTO,HASTA,MAYOR,MENOR,POSABERTURA,POSCERRADURA,COMA;
terminal Token PUNTOCOMA, IDD,COMODIN,PARENTESISA,PARENTESISC,IGUAL,MENOS,MAS,POR,DIVISION,CORCHETEA,CORCHETEC,INTEGER,STRING;
terminal Token SCORE, CADENA, RESULT, VARIABLES, CLASES, NOMBRE,TIPO,FUNCION,METODOS,COMENTARIOS,TEXTO,PARAMTETROS, ITERADOR;

/*seccion de No Terminales*/
non terminal def_variable,variable_integer,variable_String,strin,items_coma,items,asignacion,iddVarComodin, titleRescursiver;
non terminal inte,items_int,items_coma_B,asignacionInt,inicio,var_Asign,iddItemsComodin,iddComodinInt,operationaux, senteniasH1H2;
non terminal String operationString, concatenacion,subTerminalTabla,def_var_Globla, terminalTabla,operationAsig;
non terminal Integer index, parametros,operation;
non terminal title1, itemHtml, comodinIddHtml, usoVarGlobal, title2,columTitle,comodinH1H2, columDatos, fila_columna, validosTR, forAnidado;
non terminal comodintitle, def_table, comodinTable, def_html_General, sentencias, sentencia,def_for, sentenciasFro,sentenciaFor;

/* agregado de precedencias */

precedence left MENOS, MAS;
precedence left POR, DIVISION;


start with  inicio;

inicio ::= def_variable def_html_General 
        ;

/*declaracion de variables*/
def_variable ::= variable_integer def_variable
            | variable_String def_variable
            | var_Asign def_variable
            |
            ;

/*Gramatica para variables, asiganion o definicion int a, b=1,c;*/
variable_String ::= strin items  
                ;     
strin ::= STRING IDD:identificador                                      {:tabla.capturarVarible("String",identificador.getLexeme());:}                                                        
        ;

/*Gramatica para  items separadas por comas*/
 items_coma ::= iddItemsComodin items                                                        
                | error  PUNTOCOMA                               
        ;
iddItemsComodin ::= IDD:nomVar                                          {:tabla.capturarVarible("String",nomVar.getLexeme());:} 
        ;

/*Gramatica para asiganar o tener recursividad*/
 items ::= asignacion PUNTOCOMA
        | asignacion COMA items_coma
        | COMA items_coma
        | PUNTOCOMA                                             {::} 
        ; 


asignacion ::=  IGUAL operationString:contenido                {:tabla.capturarContenido(contenido); System.out.println(contenido);:}           
            ;

operationString ::=  CADENA:cadena MAS concatenacion:contenido             {:RESULT= cadena.getLexeme()+contenido;:}      
                | CADENA:contenido                                         {:RESULT = contenido.getLexeme();:}
                | subTerminalTabla:contenido MAS concatenacion:contenido1  {:RESULT = contenido + contenido1;:}     
                | subTerminalTabla:contenido                               {:RESULT = contenido; :}    
                | IDD:identificador                                        {:RESULT = tabla.contenidoVariableString(identificador,true);:}
                | IDD:identificador MAS concatenacion:contenido            {:RESULT = tabla.contenidoVariableString(identificador , true)+contenido;:}
                ;
            

concatenacion ::= concatenacion:contenido1 MAS concatenacion:contenido2                     {:RESULT = contenido1 +contenido2;:}				
	        | ENTERO:contenido		        {:RESULT = contenido.getLexeme();:}                                											
	        | DECIMAL:contenido                     {:RESULT = contenido.getLexeme();:}
                | terminalTabla:contenido               {:RESULT = contenido;:}
                | CADENA:contenido                      {:RESULT = contenido.getLexeme();:}
                | IDD:identificador                     {:RESULT = tabla.contenidoVariableString(identificador,false);:}
	        ;

/*variables de tipo integer*/
variable_integer ::= inte items_int  
                ;     
inte ::= INTEGER IDD:identificador                            {:tabla.capturarVarible("Integer",identificador.getLexeme());:} 
        ;

items_int ::= asignacionInt PUNTOCOMA
        | asignacionInt COMA items_coma_B
        | COMA items_coma_B
        | PUNTOCOMA                                            {::} 
        ; 

 items_coma_B ::= iddComodinInt items_int                                                                                     
        ;

iddComodinInt ::= IDD:identificador                            {:tabla.capturarVarible("Integer",identificador.getLexeme());:}
                ;        

asignacionInt ::=  IGUAL operation:valOperation                 {:try{tabla.capturarContenido(String.valueOf(valOperation)); System.out.println(String.valueOf(valOperation));}catch(Exception e){e.printStackTrace();}:}
            ;

operation ::= operation:numero1 MAS:operador operation:numero2	        {:try{RESULT = numero2+numero1;}catch(Exception e){e.printStackTrace();}:}	
	| operation:numero1 MENOS:operador operation:numero2	        {:try{RESULT = numero1-numero2;}catch(Exception e){e.printStackTrace();}:}		
	| operation:numero1 POR:operador operation:numero2		{:try{RESULT = numero2*numero1;}catch(Exception e){e.printStackTrace();}:}		
	| operation:numero1 DIVISION:operador operation:numero2		{:try{RESULT = numero1/numero2;}catch(Exception e){e.printStackTrace();}:}	
	| ENTERO:num							{:try{RESULT = Integer.valueOf( num.getLexeme());}catch(Exception e){e.printStackTrace();}:}						
	| DECIMAL:num                                                   {:try{RESULT = (int)Double.parseDouble( num.getLexeme());}catch(Exception e){e.printStackTrace();}:}
        | parametros:numero                                             {:RESULT= numero;:}      
        | IDD:identificador			                        {:RESULT = tabla.contenidNumeroVariable(identificador);:}										
	| PARENTESISA operation:operacion PARENTESISC                   {:try{RESULT = operacion;}catch(Exception e){e.printStackTrace();}:}				 														
	;

/*Llamada a variables globales*/
subTerminalTabla ::= RESULT PUNTO def_var_Globla:contenido                              {:RESULT = contenido;:}
                ;
def_var_Globla ::= SCORE:score                                                          {:RESULT = ""+VarGlobal.getScore();:}
                | CLASES  CORCHETEA:pos index:indice CORCHETEC PUNTO NOMBRE        {:RESULT = VarGlobal.recuperarNombreClass(indice, pos);:}
                | VARIABLES  CORCHETEA:pos index:indice CORCHETEC PUNTO NOMBRE     {:RESULT = VarGlobal.recuperacionNomVar(indice,pos);:}
                | VARIABLES  CORCHETEA:pos index:indice CORCHETEC PUNTO TIPO       {:RESULT = VarGlobal.recuperacionTipoVar(indice,pos);:}
                | VARIABLES  CORCHETEA:pos index:indice CORCHETEC PUNTO FUNCION    {:RESULT = VarGlobal.recupearacionFuncionPadreVAr(indice, pos);:}
                | METODOS  CORCHETEA:pos index:indice CORCHETEC PUNTO NOMBRE       {:RESULT = VarGlobal.recuperacionNombreMetodo(indice, pos);:}
                | METODOS  CORCHETEA:pos index:indice CORCHETEC PUNTO TIPO         {:RESULT = VarGlobal.recuperacionTipoMetodo(indice,pos);:}
                | COMENTARIOS  CORCHETEA:pos index:indice CORCHETEC PUNTO TEXTO    {:RESULT = VarGlobal.recuperarTextoComentario(indice, pos);:}
                ;

terminalTabla ::= RESULT PUNTO def_var_Globla:contenido                 {:RESULT = contenido;:}
            | RESULT PUNTO parametros:contenido                         {:RESULT = ""+ contenido;:}   
            ;
parametros ::=  METODOS  CORCHETEA:pos index:indice CORCHETEC PUNTO PARAMTETROS    {:RESULT = VarGlobal.recuperarParametrosMetodos(indice, pos);:}
            ;

index ::= ENTERO:numero                         {:try{RESULT = Integer.valueOf( numero.getLexeme());}catch(Exception e){RESULT =0;e.printStackTrace();}:}
        |IDD: numero                            {:RESULT = tabla.contenidNumeroVariable(numero);:}
        ;

/*asignacion de cualquier variable*/

var_Asign ::= iddVarComodin IGUAL operationAsig:contenido PUNTOCOMA    {:tabla.capturarConteniYadeclarad(contenido, isString); System.out.println(contenido);tabla.setReporError(true);:} 
        ;

iddVarComodin ::= IDD:identificador                             {:isString=tabla.tipoAsignacion(identificador);:}
                ;

operationAsig ::= operationAsig:numero1 MAS:operador operationAsig:numero2	{:RESULT = tabla.accionSuma(isString, numero1,numero2,operador);:}	
	| operationAsig:numero1 MENOS:operador operationAsig:numero2	        {:RESULT = tabla.accionResta(isString, numero1,numero2,operador);:}		
	| operationAsig:numero1 POR:operador operationAsig:numero2		{:RESULT = tabla.accionMultiplicar(isString, numero1,numero2,operador);:}		
	| operationAsig:numero1 DIVISION:operador operationAsig:numero2		{:RESULT = tabla.accionDividir(isString, numero1,numero2,operador);:}
	| ENTERO:contenido                                                      {:RESULT = contenido.getLexeme();:}					
	| DECIMAL:contenido                                                     {:RESULT = contenido.getLexeme();:}
        | terminalTabla:contenido                                               {:RESULT = contenido;:}
        | CADENA:contenido                                                      {:RESULT = contenido.getLexeme();:}
        | IDD:num			                                        {:RESULT = tabla.contenidoVariableString(num,false);:}										
	| operationaux                                                          {:try{RESULT = operatiosss;}catch(Exception e){e.printStackTrace();}:}				 														{::}
	;

operationaux ::= PARENTESISA operation:operacion PARENTESISC                    {:operatiosss= ""+operacion;:}
;

/*Inicio del apartado de html,titulo,for,br*/

title1 ::= H1ABRE itemHtml  H1CIERRE            
        ;

titleRescursiver ::= comodintitle titleRescursiver
                | comodintitle
                ;

itemHtml ::= comodinIddHtml itemHtml
        | usoVarGlobal  itemHtml
        | 
        ;

comodinIddHtml ::= IDD:contenido                {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | CADENA:contenido              {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | ENTERO:contenido              {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | DECIMAL:contenido             {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | COMA:contenido                {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | PUNTOCOMA:contenido           {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | PARENTESISA:contenido         {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | PARENTESISC:contenido         {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | IGUAL: contenido              {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | MENOS: contenido              {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | MAS: contenido                {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | POR: contenido                {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | DIVISION:contenido            {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | CORCHETEA: contenido          {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | CORCHETEC: contenido          {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | INTEGER: contenido            {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | STRING:contenido              {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | PUNTO:contenido               {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | DOSPUNTO:contenido            {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | HASTA:contenido               {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | MAYOR:contenido               {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                | MENOR:contenido               {:actionSalid.setContenidoTem(contenido.getLexeme());:}
                ;                       

usoVarGlobal ::= COMODIN  PARENTESISA IDD:identificador PARENTESISC COMODIN         {:actionSalid.setContenidoTem(tabla.contenidoVariableString(identificador,false));:}
                | COMODIN PARENTESISA terminalTabla:contenido PARENTESISC COMODIN   {:actionSalid.setContenidoTem(contenido);:}      
                ;

title2 ::= H2ABRE itemHtml H2CIERRE             
        ;

columTitle ::= THABRE titleRescursiver THCIERRE         {:actionSalid.capturarTH();:}
        | THABRE  THCIERRE                              {:actionSalid.capturarTH();:}
        ;

comodinH1H2 ::= title1          {:actionSalid.capturaH1();:}
        | title2                {:actionSalid.capturaH2();:}
        | SALTO                 {:actionSalid.capturaBr();:}
        | comodinIddHtml        
        | usoVarGlobal
        ;

comodintitle ::= title1         
        | title2                
        | SALTO                 
        | comodinIddHtml        
        | usoVarGlobal
        ;


columDatos ::= TDABRE titleRescursiver TDCIERRE {:actionSalid.capturarTD();:}
        | TDABRE  TDCIERRE                      {:actionSalid.capturarTD();:}
        ;

fila_columna ::= TRABRE validosTR  TRCIERRE     {:actionSalid.capturarTR();:}
        | TRABRE   TRCIERRE
        ;

validosTR ::= columDatos validosTR
        | columTitle validosTR
        | columDatos
        | columTitle  
        | comodintitle validosTR
        | comodintitle
        ;

forAnidado ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR fila_columna FORCIERRE
        | FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR  FORCIERRE
        ;

def_table ::=  TABLAABRE comodinTable TABLACIERRE  {:actionSalid.caputararTable();:}
        | TABLAABRE  TABLACIERRE                 {:actionSalid.caputararTable();:}
        ;

comodinTable ::= fila_columna comodinTable
        | comodintitle comodinTable
        | fila_columna
        | comodintitle
        | forAnidado
        | forAnidado comodinTable
        ;

def_html_General ::= HTMABRE sentencias HTMCIERRE               {:actionSalid.tostring();:}
                | HTMABRE HTMCIERRE
                ;

sentencias ::= sentencia sentencias
        | sentencia        
        ;

sentencia ::= comodinH1H2
        | def_table
        | def_for
        ;

def_for ::= FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR sentenciasFro FORCIERRE
        | FORABRE ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR  FORCIERRE
        ;

sentenciasFro ::= sentenciaFor sentenciasFro
                | sentenciaFor
                ;

sentenciaFor ::= comodinH1H2
        | def_table
        ;